import * as React from "react";
import {
  DetailsList,
  DetailsListLayoutMode,
  SelectionMode,
  IColumn,
} from "@fluentui/react/lib/DetailsList";
import {
  Panel,
  PanelType,
  PrimaryButton,
  DefaultButton,
  Checkbox,
  ShimmeredDetailsList,
  ContextualMenu,
  DirectionalHint,
  IContextualMenuItem,
  IContextualMenuProps,
} from "@fluentui/react";
import { mergeStyleSets } from "@fluentui/react/lib/Styling";
import {
  FluentTheme,
  Icon,
  TooltipHost,
  initializeIcons,
} from "@fluentui/react";
import axios from "axios";
initializeIcons();

interface IProduct {
  id: number;
  title: string;
  brand: string;
  category: string;
  rating: number;
  stock: number;
  price: number;
  discountPercentage: number;
}

const defaultSelectedColumns = ["id", "title", "brand", "category"];

const classNames = mergeStyleSets({
  table: {
    margin: "auto",
  },
  panel: {
    padding: "20px",
  },
});

const MyList = () => {
  const [items, setItems] = React.useState<IProduct[]>([]);
  const [columns, setColumns] = React.useState<IColumn[]>([]);
  const [showPanel, setShowPanel] = React.useState<boolean>(false);
  const [selectedColumns, setSelectedColumns] = React.useState<string[]>([]);
  const [tempSelectedColumns, setTempSelectedColumns] = React.useState<
    string[]
  >([]);
  const [contextualMenuProps, setContextualMenuProps] = React.useState<
    IContextualMenuProps | undefined
  >();

  React.useEffect(() => {
    GetProducts(defaultSelectedColumns);
  }, []);

  function GetProducts(selectedCols: string[]) {
    axios
      .get("https://dummyjson.com/products")
      .then((response: { data: any }) => {
        const data = response.data;
        const responseColumns: IColumn[] = Object.keys(data.products[0]).map(
          (col) => ({
            key: col,
            name: col.charAt(0).toUpperCase() + col.slice(1),
            fieldName: col,
            minWidth: 80,
            maxWidth: 150,
            isResizable: true,
            isSorted: false,
            isSortedDescending: false,
            isFiltered: true,
          })
        );

        setItems(data.products);
        setColumns(responseColumns);

        const newSelectedColumns = selectedCols.filter((col) =>
          responseColumns.some((colObj) => colObj.key === col)
        );

        setSelectedColumns(newSelectedColumns);
        setTempSelectedColumns(newSelectedColumns);
      })
      .catch((error) => console.error("Error fetching data:", error));
  }

  const onColumnClick = (
    ev?: React.MouseEvent<HTMLElement, MouseEvent>,
    column?: IColumn
  ): void => {
    if (column && ev) {
      const menuItems: IContextualMenuItem[] = [
        {
          key: "filter",
          text: "FilterBy",
          onClick: () => {
            // Implement your filter logic here
          },
        },
        {
          key: "sort",
          text: "Sort",
          onClick: () => {
            sortItems(column);
          },
        },
      ];

      setContextualMenuProps({
        items: menuItems,
        target: ev.currentTarget as HTMLElement,
        directionalHintFixed: true,
        directionalHint: DirectionalHint.bottomRightEdge,
        gapSpace: 10,
        isBeakVisible: true,
        onDismiss: () => setContextualMenuProps(undefined),
      });
    }
  };

  const sortItems = (column: IColumn) => {
    // Sorting logic
  };

  const togglePanel = () => {
    setShowPanel(!showPanel);
  };

  const applyChanges = () => {
    setSelectedColumns(tempSelectedColumns);
    setShowPanel(false);
  };

  const selectAllColumns = () => {
    // Select all columns logic
  };

  const clearAllColumns = () => {
    // Clear all columns logic
  };

  return (
    <div>
      <div
        style={{
          display: "flex",
          alignItems: "center",
          marginBottom: "10px",
          color: FluentTheme.palette.themePrimary,
        }}
      >
        <h5 style={{ marginRight: "auto" }}>MyRequestList</h5>
        <TooltipHost content="Refresh">
          <Icon
            iconName="Sync"
            style={{
              cursor: "pointer",
              color: FluentTheme.palette.themePrimary,
              fontSize: "20px",
              transition: "color 0.3s",
              marginRight: "10px",
            }}
            aria-label="Sync"
            onClick={() =>
              GetProducts([
                ...defaultSelectedColumns,
                "price",
                "rating",
                "stock",
              ])
            }
          />
        </TooltipHost>
        <TooltipHost content="Customize Columns">
          <Icon
            iconName="Table"
            style={{
              cursor: "pointer",
              color: FluentTheme.palette.themePrimary,
              fontSize: "20px",
              transition: "color 0.3s",
              marginLeft: "10px",
            }}
            onClick={togglePanel}
          />
        </TooltipHost>
      </div>

      <ShimmeredDetailsList
        items={items}
        columns={columns.filter(
          (col) =>
            selectedColumns.includes(col.key) ||
            defaultSelectedColumns.includes(col.key)
        )}
        setKey="set"
        layoutMode={DetailsListLayoutMode.justified}
        selectionMode={SelectionMode.none}
        isHeaderVisible={true}
        onColumnHeaderClick={onColumnClick}
        className={classNames.table}
      />

      <Panel
        style={{ marginTop: "50px", marginBottom: "40px" }}
        isOpen={showPanel}
        type={PanelType.smallFixedFar}
        headerText="Customize Columns"
        onDismiss={togglePanel}
      >
        <div className={classNames.panel}>
          <div style={{ marginBottom: "15px" }}>
            <Checkbox
              label="Select All"
              checked={
                tempSelectedColumns.length ===
                columns
                  .map((col) => col.key)
                  .filter(
                    (key) =>
                      !defaultSelectedColumns.includes(key) ||
                      tempSelectedColumns.includes(key)
                  ).length
              }
              onChange={(ev, checked) => {
                if (checked) {
                  selectAllColumns();
                } else {
                  clearAllColumns();
                }
              }}
            />
          </div>
          {columns.map((col) => (
            <div key={col.key} style={{ marginBottom: "15px" }}>
              <Checkbox
                key={col.key}
                label={col.name}
                checked={
                  tempSelectedColumns.includes(col.key) ||
                  defaultSelectedColumns.includes(col.key)
                }
                onChange={(ev, checked) => {
                  if (!defaultSelectedColumns.includes(col.key)) {
                    setTempSelectedColumns((prevSelectedColumns) =>
                      checked
                        ? [...prevSelectedColumns, col.key]
                        : prevSelectedColumns.filter((key) => key !== col.key)
                    );
                  }
                }}
                disabled={defaultSelectedColumns.includes(col.key)}
              />
            </div>
          ))}
          <PrimaryButton
            style={{ marginTop: "30px" }}
            text="Apply"
            onClick={applyChanges}
          />
          <DefaultButton
            style={{ marginTop: "10px", marginLeft: "15px" }}
            text="Cancel"
            onClick={togglePanel}
          />
        </div>
      </Panel>
      {contextualMenuProps && <ContextualMenu {...contextualMenuProps} />}
    </div>
  );
};

export default MyList;

// import * as React from "react";
// import {
//   DetailsList,
//   DetailsListLayoutMode,
//   SelectionMode,
//   IColumn,
// } from "@fluentui/react/lib/DetailsList";
// import {
//   Panel,
//   PanelType,
//   PrimaryButton,
//   DefaultButton,
//   Checkbox,
//   ShimmeredDetailsList,
// } from "@fluentui/react";
// import { mergeStyleSets } from "@fluentui/react/lib/Styling";
// import {
//   FluentTheme,
//   Icon,
//   TooltipHost,
//   initializeIcons,
// } from "@fluentui/react";
// import axios from "axios";
// initializeIcons();

// interface IProduct {
//   id: number;
//   title: string;
//   brand: string;
//   category: string;
//   rating: number;
//   stock: number;
//   price: number;
//   discountPercentage: number;
// }

// const defaultSelectedColumns = ["id", "title", "brand", "category"];

// const classNames = mergeStyleSets({
//   table: {
//     margin: "auto",
//   },
//   panel: {
//     padding: "20px",
//   },
// });

// const MyList = () => {
//   const [items, setItems] = React.useState<IProduct[]>([]);
//   const [columns, setColumns] = React.useState<IColumn[]>([]);
//   const [showPanel, setShowPanel] = React.useState<boolean>(false);
//   const [selectedColumns, setSelectedColumns] = React.useState<string[]>([]);
//   const [tempSelectedColumns, setTempSelectedColumns] = React.useState<
//     string[]
//   >([]);

//   React.useEffect(() => {
//     GetProducts(defaultSelectedColumns);
//   }, []);

//   function GetProducts(selectedCols: string[]) {
//     axios
//       .get("https://dummyjson.com/products")
//       .then((response: { data: any }) => {
//         const data = response.data;
//         const responseColumns: IColumn[] = Object.keys(data.products[0]).map(
//           (col) => ({
//             key: col,
//             name: col.charAt(0).toUpperCase() + col.slice(1),
//             fieldName: col,
//             minWidth: 80,
//             maxWidth: 150,
//             isResizable: true,
//             isSorted: false,
//             isSortedDescending: false,
//           })
//         );

//         setItems(data.products);
//         setColumns(responseColumns);

//         const newSelectedColumns = selectedCols.filter((col) =>
//           responseColumns.some((colObj) => colObj.key === col)
//         );

//         setSelectedColumns(newSelectedColumns);
//         setTempSelectedColumns(newSelectedColumns);
//       })
//       .catch((error) => console.error("Error fetching data:", error));
//   }

//   const onColumnClick = (
//     ev: React.MouseEvent<HTMLElement, MouseEvent>,
//     column?: IColumn
//   ): void => {
//     if (column) {
//       const newColumns = columns.map((col) => ({
//         ...col,
//         isSorted: col.key === column.key,
//         isSortedDescending: col.key === column.key && !col.isSortedDescending,
//       }));

//       setColumns(newColumns);

//       const sortedItems = [...items].sort((a, b) => {
//         const aValue = a[column.fieldName as keyof IProduct];
//         const bValue = b[column.fieldName as keyof IProduct];

//         if (typeof aValue === "number" && typeof bValue === "number") {
//           return column.isSortedDescending ? bValue - aValue : aValue - bValue;
//         }

//         if (typeof aValue === "string" && typeof bValue === "string") {
//           return column.isSortedDescending
//             ? bValue.localeCompare(aValue)
//             : aValue.localeCompare(bValue);
//         }

//         return 0;
//       });

//       setItems(sortedItems);
//     }
//   };

//   const togglePanel = () => {
//     setShowPanel(!showPanel);
//   };

//   const applyChanges = () => {
//     setSelectedColumns(tempSelectedColumns);
//     setShowPanel(false);
//   };

//   const selectAllColumns = () => {
//     setTempSelectedColumns(
//       columns
//         .map((col) => col.key)
//         .filter(
//           (key) =>
//             !defaultSelectedColumns.includes(key) ||
//             tempSelectedColumns.includes(key)
//         )
//     );
//   };

//   const clearAllColumns = () => {
//     setTempSelectedColumns([]);
//   };

//   return (
//     <div>
//       <div
//         style={{
//           display: "flex",
//           alignItems: "center",
//           marginBottom: "10px",
//           color: FluentTheme.palette.themePrimary,
//         }}
//       >
//         <h5 style={{ marginRight: "auto" }}>MyRequestList</h5>
//         <TooltipHost content="Refresh">
//           <Icon
//             iconName="Sync"
//             style={{
//               cursor: "pointer",
//               color: FluentTheme.palette.themePrimary,
//               fontSize: "20px",
//               transition: "color 0.3s",
//               marginRight: "10px",
//             }}
//             aria-label="Sync"
//             onClick={() =>
//               GetProducts([
//                 ...defaultSelectedColumns,
//                 "price",
//                 "rating",
//                 "stock",
//               ])
//             }
//           />
//         </TooltipHost>
//         <TooltipHost content="Customize Columns">
//           <Icon
//             iconName="Table"
//             style={{
//               cursor: "pointer",
//               color: FluentTheme.palette.themePrimary,
//               fontSize: "20px",
//               transition: "color 0.3s",
//               marginLeft: "10px",
//             }}
//             onClick={togglePanel}
//           />
//         </TooltipHost>
//       </div>

//       <ShimmeredDetailsList
//         items={items}
//         columns={columns.filter(
//           (col) =>
//             selectedColumns.includes(col.key) ||
//             defaultSelectedColumns.includes(col.key)
//         )}
//         setKey="set"
//         layoutMode={DetailsListLayoutMode.justified}
//         selectionMode={SelectionMode.none}
//         isHeaderVisible={true}
//         onColumnHeaderClick={onColumnClick as any}
//         className={classNames.table}
//       />

//       <Panel
//         style={{ marginTop: "50px", marginBottom: "40px" }}
//         isOpen={showPanel}
//         type={PanelType.smallFixedFar}
//         headerText="Customize Columns"
//         onDismiss={togglePanel}
//       >
//         <div className={classNames.panel}>
//           <div style={{ marginBottom: "15px" }}>
//             <Checkbox
//               label="Select All"
//               checked={
//                 tempSelectedColumns.length ===
//                 columns
//                   .map((col) => col.key)
//                   .filter(
//                     (key) =>
//                       !defaultSelectedColumns.includes(key) ||
//                       tempSelectedColumns.includes(key)
//                   ).length
//               }
//               onChange={(ev, checked) => {
//                 if (checked) {
//                   selectAllColumns();
//                 } else {
//                   clearAllColumns();
//                 }
//               }}
//             />
//           </div>
//           {columns.map((col) => (
//             <div key={col.key} style={{ marginBottom: "15px" }}>
//               <Checkbox
//                 key={col.key}
//                 label={col.name}
//                 checked={
//                   tempSelectedColumns.includes(col.key) ||
//                   defaultSelectedColumns.includes(col.key)
//                 }
//                 onChange={(ev, checked) => {
//                   if (!defaultSelectedColumns.includes(col.key)) {
//                     setTempSelectedColumns((prevSelectedColumns) =>
//                       checked
//                         ? [...prevSelectedColumns, col.key]
//                         : prevSelectedColumns.filter((key) => key !== col.key)
//                     );
//                   }
//                 }}
//                 disabled={defaultSelectedColumns.includes(col.key)}
//               />
//             </div>
//           ))}
//           <PrimaryButton
//             style={{ marginTop: "30px" }}
//             text="Apply"
//             onClick={applyChanges}
//           />
//           <DefaultButton
//             style={{ marginTop: "10px", marginLeft: "15px" }}
//             text="Cancel"
//             onClick={togglePanel}
//           />
//         </div>
//       </Panel>
//     </div>
//   );
// };

// export default MyList;

// import * as React from "react";
// import {
//   DetailsList,
//   DetailsListLayoutMode,
//   SelectionMode,
//   IColumn,
// } from "@fluentui/react/lib/DetailsList";
// import { mergeStyleSets } from "@fluentui/react/lib/Styling";
// import {
//   ContextualMenu,
//   DirectionalHint,
//   FluentTheme,
//   IContextualMenuItem,
//   IContextualMenuProps,
//   Icon,
//   TooltipHost,
//   initializeIcons,
// } from "@fluentui/react";
// import axios from "axios";
// initializeIcons();

// interface IProduct {
//   id: number;
//   title: string;
//   brand: string;
//   category: string;
//   rating: number;
//   stock: number;
//   price: number;
//   discountPercentage: number;
// }

// const classNames = mergeStyleSets({
//   table: {
//     margin: "auto",
//   },
// });

// const MyList = () => {
//   const [items, setItems] = React.useState<IProduct[]>([]);
//   const [columns, setColumns] = React.useState<IColumn[]>([
//     {
//       key: "id",
//       name: "ID",
//       fieldName: "id",
//       minWidth: 50,
//       maxWidth: 100,
//       isResizable: true,
//     },
//     {
//       key: "title",
//       name: "Title",
//       fieldName: "title",
//       minWidth: 100,
//       maxWidth: 200,
//       isResizable: true,
//     },
//     // Add more columns here...
//   ]);

//   const [contextualMenuProps, setContextualMenuProps] = React.useState<
//     IContextualMenuProps | undefined
//   >();

//   React.useEffect(() => {
//     GetProducts();
//   }, []);

//   function GetProducts() {
//     axios
//       .get("https://dummyjson.com/products")
//       .then((response: { data: any }) => {
//         const data = response.data;
//         setItems(data.products);
//       })
//       .catch((error) => console.error("Error fetching data:", error));
//   }

//   const onColumnClick = (
//     ev?: React.MouseEvent<HTMLElement, MouseEvent>,
//     column?: IColumn
//   ): void => {
//     if (column) {
//       const menuItems: IContextualMenuItem[] = [
//         {
//           key: "filter",
//           text: "FilterBy",
//           onClick: () => {
//             // Implement your filter logic here
//           },
//         },
//         {
//           key: "sort",
//           text: "Sort",
//           onClick: () => {
//             sortItems(column);
//           },
//         },
//       ];

//       setContextualMenuProps({
//         items: menuItems,
//         target: ev!.currentTarget as HTMLElement,
//         directionalHintFixed: true,
//         directionalHint: DirectionalHint.bottomRightEdge,
//         gapSpace: 10,
//         isBeakVisible: true,
//         onDismiss: () => setContextualMenuProps(undefined),
//       });
//     }
//   };

//   const sortItems = (column: IColumn) => {
//     const newColumns = columns.map((col) => ({
//       ...col,
//       isSorted: col.key === column.key,
//       isSortedDescending: col.key === column.key && !col.isSortedDescending,
//     }));

//     setColumns(newColumns);

//     const sortedItems = [...items].sort((a, b) => {
//       const aValue = a[column.fieldName as keyof IProduct];
//       const bValue = b[column.fieldName as keyof IProduct];
//       return aValue.toString().localeCompare(bValue.toString());
//     });

//     if (column.isSortedDescending) {
//       sortedItems.reverse();
//     }

//     setItems(sortedItems);
//     setContextualMenuProps(undefined);
//   };

//   return (
//     <div>
//       <div
//         style={{
//           display: "flex",
//           alignItems: "center",
//           marginBottom: "10px",
//           color: FluentTheme.palette.themePrimary,
//         }}
//       >
//         <h5 style={{ marginRight: "auto" }}>MyRequestList</h5>
//         <TooltipHost content="Refresh">
//           <Icon
//             iconName="Sync"
//             style={{
//               cursor: "pointer",
//               color: FluentTheme.palette.themePrimary,
//               fontSize: "20px",
//               transition: "color 0.3s",
//               marginRight: "10px",
//             }}
//             aria-label="Sync"
//             onClick={() => GetProducts()}
//           />
//         </TooltipHost>
//       </div>

//       <DetailsList
//         items={items}
//         columns={columns}
//         setKey="set"
//         layoutMode={DetailsListLayoutMode.justified}
//         selectionMode={SelectionMode.none}
//         isHeaderVisible={true}
//         onColumnHeaderClick={onColumnClick}
//         className={classNames.table}
//       />
//       {contextualMenuProps && <ContextualMenu {...contextualMenuProps} />}
//     </div>
//   );
// };

// export default MyList;

// import * as React from "react";
// import {
//   DetailsList,
//   DetailsListLayoutMode,
//   SelectionMode,
//   IColumn,
// } from "@fluentui/react/lib/DetailsList";
// import { mergeStyleSets } from "@fluentui/react/lib/Styling";
// import {
//   FluentTheme,
//   Icon,
//   TooltipHost,
//   initializeIcons,
// } from "@fluentui/react";
// import axios from "axios";
// initializeIcons();

// interface IProduct {
//   id: number;
//   title: string;
//   brand: string;
//   category: string;
//   rating: number;
//   stock: number;
//   price: number;
//   discountPercentage: number;
// }

// const classNames = mergeStyleSets({
//   table: {
//     margin: "auto",
//   },
// });

// const MyList = () => {
//   const [items, setItems] = React.useState<IProduct[]>([]);
//   const [columns, setColumns] = React.useState<IColumn[]>([
//     {
//       key: "id",
//       name: "ID",
//       fieldName: "id",
//       minWidth: 50,
//       maxWidth: 100,
//       isResizable: true,
//     },
//     {
//       key: "title",
//       name: "Title",
//       fieldName: "title",
//       minWidth: 100,
//       maxWidth: 200,
//       isResizable: true,
//     },
//     // Add more columns here...
//   ]);

//   React.useEffect(() => {
//     GetProducts();
//   }, []);

//   function GetProducts() {
//     axios
//       .get("https://dummyjson.com/products")
//       .then((response: { data: any }) => {
//         const data = response.data;
//         setItems(data.products);
//       })
//       .catch((error) => console.error("Error fetching data:", error));
//   }

//   const onColumnClick = (
//     ev: React.MouseEvent<HTMLElement, MouseEvent>,
//     column?: IColumn
//   ): void => {
//     if (column) {
//       const newColumns = columns.map((col) => ({
//         ...col,
//         isSorted: col.key === column.key,
//         isSortedDescending: col.key === column.key && !col.isSortedDescending,
//       }));

//       setColumns(newColumns);

//       const sortedItems = [...items].sort((a, b) => {
//         const aValue = a[column.fieldName as keyof IProduct];
//         const bValue = b[column.fieldName as keyof IProduct];
//         return aValue.toString().localeCompare(bValue.toString());
//       });

//       if (column.isSortedDescending) {
//         sortedItems.reverse();
//       }

//       setItems(sortedItems);
//     }
//   };

//   return (
//     <div>
//       <div
//         style={{
//           display: "flex",
//           alignItems: "center",
//           marginBottom: "10px",
//           color: FluentTheme.palette.themePrimary,
//         }}
//       >
//         <h5 style={{ marginRight: "auto" }}>MyRequestList</h5>
//         <TooltipHost content="Refresh">
//           <Icon
//             iconName="Sync"
//             style={{
//               cursor: "pointer",
//               color: FluentTheme.palette.themePrimary,
//               fontSize: "20px",
//               transition: "color 0.3s",
//               marginRight: "10px",
//             }}
//             aria-label="Sync"
//             onClick={() => GetProducts()}
//           />
//         </TooltipHost>
//       </div>

//       <DetailsList
//         items={items}
//         columns={columns}
//         setKey="set"
//         layoutMode={DetailsListLayoutMode.justified}
//         selectionMode={SelectionMode.none}
//         isHeaderVisible={true}
//         onColumnHeaderClick={onColumnClick as any} // Directly cast onColumnClick to any
//         className={classNames.table}
//       />
//     </div>
//   );
// };

// export default MyList;

// import * as React from "react";
// import {
//   DetailsList,
//   DetailsListLayoutMode,
//   SelectionMode,
//   IColumn,
// } from "@fluentui/react/lib/DetailsList";
// import {
//   Panel,
//   PanelType,
//   PrimaryButton,
//   DefaultButton,
//   Checkbox,
//   ShimmeredDetailsList,
// } from "@fluentui/react";
// import { mergeStyleSets } from "@fluentui/react/lib/Styling";
// import {
//   FluentTheme,
//   Icon,
//   TooltipHost,
//   initializeIcons,
// } from "@fluentui/react";
// import axios from "axios";
// initializeIcons();

// interface IProduct {
//   id: number;
//   title: string;
//   brand: string;
//   category: string;
//   rating: number;
//   stock: number;
//   price: number;
//   discountPercentage: number;
// }

// const defaultSelectedColumns = ["id", "title", "brand", "category"];

// const classNames = mergeStyleSets({
//   table: {
//     margin: "auto",
//   },
//   panel: {
//     padding: "20px",
//   },
// });

// const MyList = () => {
//   const [items, setItems] = React.useState<IProduct[]>([]);
//   const [columns, setColumns] = React.useState<IColumn[]>([]);
//   const [showPanel, setShowPanel] = React.useState<boolean>(false);
//   const [selectedColumns, setSelectedColumns] = React.useState<string[]>([]);
//   const [tempSelectedColumns, setTempSelectedColumns] = React.useState<
//     string[]
//   >([]);

//   React.useEffect(() => {
//     GetProducts(defaultSelectedColumns);
//   }, []);

//   function GetProducts(selectedCols: string[]) {
//     axios
//       .get("https://dummyjson.com/products")
//       .then((response: { data: any }) => {
//         const data = response.data;
//         const responseColumns: IColumn[] = Object.keys(data.products[0]).map(
//           (col) => ({
//             key: col,
//             name: col.charAt(0).toUpperCase() + col.slice(1),
//             fieldName: col,
//             minWidth: 80,
//             maxWidth: 150,
//             isResizable: true,
//             isSorted: false,
//             isSortedDescending: false,
//           })
//         );

//         setItems(data.products);
//         setColumns(responseColumns);

//         const newSelectedColumns = selectedCols.filter((col) =>
//           responseColumns.some((colObj) => colObj.key === col)
//         );

//         setSelectedColumns(newSelectedColumns);
//         setTempSelectedColumns(newSelectedColumns);
//       })
//       .catch((error) => console.error("Error fetching data:", error));
//   }

//   const onColumnClick = (
//     ev: React.MouseEvent<HTMLElement, MouseEvent>,
//     column?: IColumn
//   ): void => {
//     if (column) {
//       const newColumns = columns.map((col) => ({
//         ...col,
//         isSorted: col.key === column.key,
//         isSortedDescending: col.key === column.key && !col.isSortedDescending,
//       }));

//       setColumns(newColumns);

//       const sortedItems = [...items].sort((a, b) => {
//         const aValue = a[column.fieldName as keyof IProduct];
//         const bValue = b[column.fieldName as keyof IProduct];

//         if (typeof aValue === "number" && typeof bValue === "number") {
//           // Numeric comparison
//           return column.isSortedDescending ? bValue - aValue : aValue - bValue;
//         }

//         if (typeof aValue === "string" && typeof bValue === "string") {
//           // String comparison
//           return column.isSortedDescending
//             ? bValue.localeCompare(aValue)
//             : aValue.localeCompare(bValue);
//         }

//         return 0; // Fallback for other types (e.g., undefined)
//       });

//       setItems(sortedItems);
//     }
//   };

//   const togglePanel = () => {
//     setShowPanel(!showPanel);
//   };

//   const applyChanges = () => {
//     setSelectedColumns(tempSelectedColumns);
//     setShowPanel(false);
//   };

//   const selectAllColumns = () => {
//     setTempSelectedColumns(
//       columns
//         .map((col) => col.key)
//         .filter(
//           (key) =>
//             !defaultSelectedColumns.includes(key) ||
//             tempSelectedColumns.includes(key)
//         )
//     );
//   };

//   const clearAllColumns = () => {
//     setTempSelectedColumns([]);
//   };

//   return (
//     <div>
//       <div
//         style={{
//           display: "flex",
//           alignItems: "center",
//           marginBottom: "10px",
//           color: FluentTheme.palette.themePrimary,
//         }}
//       >
//         <h5 style={{ marginRight: "auto" }}>MyRequestList</h5>
//         <TooltipHost content="Refresh">
//           <Icon
//             iconName="Sync"
//             style={{
//               cursor: "pointer",
//               color: FluentTheme.palette.themePrimary,
//               fontSize: "20px",
//               transition: "color 0.3s",
//               marginRight: "10px",
//             }}
//             aria-label="Sync"
//             onClick={() =>
//               GetProducts([
//                 ...defaultSelectedColumns,
//                 "price",
//                 "rating",
//                 "stock",
//               ])
//             }
//           />
//         </TooltipHost>
//         <TooltipHost content="Customize Columns">
//           <Icon
//             iconName="Table"
//             style={{
//               cursor: "pointer",
//               color: FluentTheme.palette.themePrimary,
//               fontSize: "20px",
//               transition: "color 0.3s",
//               marginLeft: "10px",
//             }}
//             onClick={togglePanel}
//           />
//         </TooltipHost>
//       </div>

//       <ShimmeredDetailsList
//         items={items}
//         columns={columns.filter(
//           (col) =>
//             selectedColumns.includes(col.key) ||
//             defaultSelectedColumns.includes(col.key)
//         )}
//         setKey="set"
//         layoutMode={DetailsListLayoutMode.justified}
//         selectionMode={SelectionMode.none}
//         isHeaderVisible={true}
//         onColumnHeaderClick={onColumnClick as any}
//         className={classNames.table}
//       />

//       <Panel
//         style={{ marginTop: "50px", marginBottom: "40px" }}
//         isOpen={showPanel}
//         type={PanelType.smallFixedFar}
//         headerText="Customize Columns"
//         onDismiss={togglePanel}
//       >
//         <div className={classNames.panel}>
//           <div style={{ marginBottom: "15px" }}>
//             <Checkbox
//               label="Select All"
//               checked={
//                 tempSelectedColumns.length ===
//                 columns
//                   .map((col) => col.key)
//                   .filter(
//                     (key) =>
//                       !defaultSelectedColumns.includes(key) ||
//                       tempSelectedColumns.includes(key)
//                   ).length
//               }
//               onChange={(ev, checked) => {
//                 if (checked) {
//                   selectAllColumns();
//                 } else {
//                   clearAllColumns();
//                 }
//               }}
//             />
//           </div>
//           {columns.map((col) => (
//             <div key={col.key} style={{ marginBottom: "15px" }}>
//               <Checkbox
//                 key={col.key}
//                 label={col.name}
//                 checked={
//                   tempSelectedColumns.includes(col.key) ||
//                   defaultSelectedColumns.includes(col.key)
//                 }
//                 onChange={(ev, checked) => {
//                   if (!defaultSelectedColumns.includes(col.key)) {
//                     setTempSelectedColumns((prevSelectedColumns) =>
//                       checked
//                         ? [...prevSelectedColumns, col.key]
//                         : prevSelectedColumns.filter((key) => key !== col.key)
//                     );
//                   }
//                 }}
//                 disabled={defaultSelectedColumns.includes(col.key)}
//               />
//             </div>
//           ))}
//           <PrimaryButton
//             style={{ marginTop: "30px" }}
//             text="Apply"
//             onClick={applyChanges}
//           />
//           <DefaultButton
//             style={{ marginTop: "10px", marginLeft: "15px" }}
//             text="Cancel"
//             onClick={togglePanel}
//           />
//         </div>
//       </Panel>
//     </div>
//   );
// };

// export default MyList;



/////
Plane code

import * as React from "react";
import {
  DetailsList,
  DetailsListLayoutMode,
  SelectionMode,
  IColumn,
} from "@fluentui/react/lib/DetailsList";
import { mergeStyleSets } from "@fluentui/react/lib/Styling";
import {
  FluentTheme,
  Icon,
  TooltipHost,
  initializeIcons,
} from "@fluentui/react";
import axios from "axios";
initializeIcons();

interface IProduct {
  id: number;
  title: string;
  brand: string;
  category: string;
  rating: number;
  stock: number;
  price: number;
  discountPercentage: number;
}

const classNames = mergeStyleSets({
  table: {
    margin: "auto",
  },
});

const MyList = () => {
  const [items, setItems] = React.useState<IProduct[]>([]);
  const [columns, setColumns] = React.useState<IColumn[]>([
    {
      key: "id",
      name: "ID",
      fieldName: "id",
      minWidth: 50,
      maxWidth: 100,
      isResizable: true,
    },
    {
      key: "title",
      name: "Title",
      fieldName: "title",
      minWidth: 100,
      maxWidth: 200,
      isResizable: true,
    },
    // Add more columns here...
  ]);

  React.useEffect(() => {
    GetProducts();
  }, []);

  function GetProducts() {
    axios
      .get("https://dummyjson.com/products")
      .then((response: { data: any }) => {
        const data = response.data;
        setItems(data.products);
      })
      .catch((error) => console.error("Error fetching data:", error));
  }

  const onColumnClick = (
    ev: React.MouseEvent<HTMLElement, MouseEvent>,
    column?: IColumn
  ): void => {
    if (column) {
      const newColumns = columns.map((col) => ({
        ...col,
        isSorted: col.key === column.key,
        isSortedDescending: col.key === column.key && !col.isSortedDescending,
      }));

      setColumns(newColumns);

      const sortedItems = [...items].sort((a, b) => {
        const aValue = a[column.fieldName as keyof IProduct];
        const bValue = b[column.fieldName as keyof IProduct];
        return aValue.toString().localeCompare(bValue.toString());
      });

      if (column.isSortedDescending) {
        sortedItems.reverse();
      }

      setItems(sortedItems);
    }
  };

  return (
    <div>
      <div
        style={{
          display: "flex",
          alignItems: "center",
          marginBottom: "10px",
          color: FluentTheme.palette.themePrimary,
        }}
      >
        <h5 style={{ marginRight: "auto" }}>MyRequestList</h5>
        <TooltipHost content="Refresh">
          <Icon
            iconName="Sync"
            style={{
              cursor: "pointer",
              color: FluentTheme.palette.themePrimary,
              fontSize: "20px",
              transition: "color 0.3s",
              marginRight: "10px",
            }}
            aria-label="Sync"
            onClick={() => GetProducts()}
          />
        </TooltipHost>
      </div>

      <DetailsList
        items={items}
        columns={columns}
        setKey="set"
        layoutMode={DetailsListLayoutMode.justified}
        selectionMode={SelectionMode.none}
        isHeaderVisible={true}
        onColumnHeaderClick={onColumnClick as any} // Directly cast onColumnClick to any
        className={classNames.table}
      />
    </div>
  );
};

export default MyList;


import * as React from "react";
import {
  DetailsList,
  DetailsListLayoutMode,
  Selection,
  SelectionMode,
  IColumn,
} from "@fluentui/react/lib/DetailsList";
import { MarqueeSelection } from "@fluentui/react/lib/MarqueeSelection";
import { mergeStyleSets } from "@fluentui/react/lib/Styling";
import { Panel, PanelType } from "@fluentui/react/lib/Panel";
import { PrimaryButton, DefaultButton } from "@fluentui/react/lib/Button";
import {
  FluentTheme,
  Icon,
  TooltipHost,
  initializeIcons,
} from "@fluentui/react";
import axios from "axios";
initializeIcons();

interface IProduct {
  id: number;
  title: string;
  brand: string;
  category: string;
  rating: number;
  stock: number;
  price: number;
  discountPercentage: number;
}

const classNames = mergeStyleSets({
  table: {
    margin: "auto",
  },
});

const MyList = () => {
  const [items, setItems] = React.useState<IProduct[]>([]);
  const [selectedColumns, setSelectedColumns] = React.useState<string[]>([]);
  const [dynamicColumns, setDynamicColumns] = React.useState<IColumn[]>([]);

  React.useEffect(() => {
    refreshData(["id", "title"]);
  }, []);

  function GetProducts(columns: string[]) {
    axios
      .get("https://dummyjson.com/products")
      .then((response: { data: any }) => {
        const data = response.data;
        // Dynamically generate columns based on the response
        const responseColumns = columns.map((col) => ({
          key: col,
          name: col.charAt(0).toUpperCase() + col.slice(1),
          fieldName: col,
          minWidth: 50,
          maxWidth: 150,
        }));
        // Filter data based on selected columns
        const filteredData = data.products.map((product: IProduct) => {
          const filteredProduct: any = {};
          columns.forEach((col) => {
            filteredProduct[col] = product[col as keyof IProduct]; // Use type assertion
          });
          return filteredProduct;
        });

        setItems(filteredData);
        setDynamicColumns(responseColumns);
      })
      .catch((error) => console.error("Error fetching data:", error));
  }
  const selection = new Selection({
    onSelectionChanged: () => {},
  });
  const refreshData = (columns: string[]) => {
    setSelectedColumns(columns);
    GetProducts(columns);
  };
  return (
    <div>
      <div
        style={{
          display: "flex",
          alignItems: "center",
          marginBottom: "10px",
          color: FluentTheme.palette.themePrimary,
        }}
      >
        <h5 style={{ marginRight: "auto" }}>MyRequestList</h5>
        <TooltipHost content="Refresh">
          <Icon
            iconName="Sync"
            style={{
              cursor: "pointer",
              color: FluentTheme.palette.themePrimary,
              fontSize: "20px",
              transition: "color 0.3s",
              marginRight: "10px",
            }}
            aria-label="Sync"
            onClick={() =>
              refreshData(["id", "title", "brand", "category", "rating"])
            }
          />
        </TooltipHost>
        <TooltipHost content="Apply Filter">
          <Icon
            iconName="Filter"
            style={{
              cursor: "pointer",
              color: FluentTheme.palette.themePrimary,
              fontSize: "20px",
              transition: "color 0.3s",
            }}
            aria-label="Filter"
          />
        </TooltipHost>
        <TooltipHost content="Customize Columns">
          <Icon
            iconName="Table"
            style={{
              cursor: "pointer",
              color: FluentTheme.palette.themePrimary,
              fontSize: "20px",
              transition: "color 0.3s",
              marginLeft: "10px",
            }}
          />
        </TooltipHost>
      </div>

      <MarqueeSelection selection={selection}>
        <DetailsList
          items={items}
          columns={dynamicColumns}
          setKey="set"
          layoutMode={DetailsListLayoutMode.justified}
          selection={selection}
          selectionMode={SelectionMode.multiple}
          isHeaderVisible={true}
          className={classNames.table}
        />
      </MarqueeSelection>
    </div>
  );
};

export default MyList;


////////////////////
import React from "react";
import { Panel, PanelType } from "@fluentui/react/lib/Panel";
import { PrimaryButton, DefaultButton } from "@fluentui/react/lib/Button";
import { IColumn } from "@fluentui/react";
import { Checkbox } from "@fluentui/react/lib/Checkbox";

const panelContentStyles = {
  padding: "16px",
};

const checkboxLabelStyles = {
  fontFamily: "Segoe UI, Arial, sans-serif",
  fontWeight: "normal",
  marginLeft: "8px",
};

interface ColumnCustomizationPanelProps {
  headerText: string;
  defaultColumnscount: number;
  columns: IColumn[];
  onClose: () => void;
  onSave: (selectedColumns: IColumn[]) => void;
}

const MyPanel: React.FC<ColumnCustomizationPanelProps> = ({
  headerText,
  defaultColumnscount,
  columns,
  onClose,
  onSave,
}) => {
  const [selectedColumnsMap, setSelectedColumnsMap] = React.useState<
    Map<string, boolean>
  >(new Map());

  // Initialize selectedColumnsMap with disabled columns checked
  React.useEffect(() => {
    const initialSelectedColumns = columns.reduce((map, col) => {
      if (!col.isFiltered) {
        map.set(col.key, true);
      }
      return map;
    }, new Map<string, boolean>());
    setSelectedColumnsMap(initialSelectedColumns);
  }, [columns]);

  const toggleColumnVisibility = (key: string) => {
    setSelectedColumnsMap((prevMap) => {
      const updatedMap = new Map(prevMap);
      updatedMap.set(key, !prevMap.get(key));
      return updatedMap;
    });
  };

  const noOfColumnsSelected = Array.from(selectedColumnsMap.values()).filter(
    Boolean
  ).length;

  function getSelectedCheckboxKeys(): string {
    const selectedKeys: string[] = [];
    selectedColumnsMap.forEach((value, key) => {
      debugger;
      if (value) {
        selectedKeys.push(key);
      }
    });
    console.log(selectedKeys);
    return selectedKeys.join(",");
  }

  return (
    <Panel
      style={{ marginTop: "50px", marginBottom: "40px" }}
      isOpen={true}
      type={PanelType.smallFixedFar}
      headerText={headerText + " (" + noOfColumnsSelected + ")"}
      onDismiss={onClose}
      closeButtonAriaLabel="Close"
      isFooterAtBottom={true}
      onRenderFooterContent={() => (
        <div style={{ display: "flex", justifyContent: "left" }}>
          <PrimaryButton
            //onClick={getSelectedCheckboxKeys}
            onClick={() => {
              const selectedColumns: IColumn[] = [];
              selectedColumnsMap.forEach((value, key) => {
                if (value && columns.find((col) => col.key === key)) {
                  selectedColumns.push(columns.find((col) => col.key === key)!);
                }
              });
              onSave(selectedColumns);
            }}
            text="Apply"
            style={{ marginRight: 25, marginLeft: "30px" }}
            disabled={noOfColumnsSelected === 0 + defaultColumnscount}
          />
          <DefaultButton onClick={onClose} text="Cancel" />
        </div>
      )}
    >
      <div style={panelContentStyles}>
        {columns.map((col) => (
          <div key={col.key} style={{ marginBottom: "25px" }}>
            <Checkbox
              label={col.name}
              checked={selectedColumnsMap.get(col.key) || false}
              disabled={!col.isFiltered}
              onChange={() => toggleColumnVisibility(col.key)}
              styles={{
                label: checkboxLabelStyles,
              }}
            />
          </div>
        ))}
      </div>
    </Panel>
  );
};

export default MyPanel;

// import React from "react";
// import { Panel, PanelType } from "@fluentui/react/lib/Panel";
// import { PrimaryButton, DefaultButton } from "@fluentui/react/lib/Button";
// import { IColumn } from "@fluentui/react";
// import { Checkbox } from "@fluentui/react/lib/Checkbox";

// const panelContentStyles = {
//   padding: "16px",
// };

// const checkboxLabelStyles = {
//   fontFamily: "Segoe UI, Arial, sans-serif",
//   fontWeight: "normal",
//   marginLeft: "8px",
// };

// interface ColumnCustomizationPanelProps {
//   headerText: string;
//   columns: IColumn[];
//   onClose: () => void;
//   onSave: (selectedColumns: IColumn[]) => void;
// }

// const MyPanel: React.FC<ColumnCustomizationPanelProps> = ({
//   headerText,
//   columns,
//   onClose,
//   onSave,
// }) => {
//   const [selectedColumns, setSelectedColumns] = React.useState<IColumn[]>(() =>
//     columns.map((col) => ({
//       ...col,
//       isVisible: false,
//     }))
//   );

//   const toggleColumnVisibility = (key: any) => {
//     //debugger;
//     setSelectedColumns((prevColumns: any) =>
//       prevColumns.map((col: any) =>
//         col.key === key ? { ...col, isVisible: !col.isVisible } : col
//       )
//     );
//   };
//   //let noOfColumnsSelected = 0;
//   //console.log(selectedColumns);
//   const noOfColumnsSelected = selectedColumns.filter(
//     (col) => !col.isFiltered
//   ).length;

//   return (
//     <Panel
//       style={{ marginTop: "50px", marginBottom: "40px" }}
//       isOpen={true}
//       type={PanelType.smallFixedFar}
//       headerText={headerText + " (" + noOfColumnsSelected + ")"}
//       onDismiss={onClose}
//       closeButtonAriaLabel="Close"
//       isFooterAtBottom={true}
//       onRenderFooterContent={() => (
//         <div style={{ display: "flex", justifyContent: "flex-end" }}>
//           <DefaultButton
//             onClick={onClose}
//             text="Cancel"
//             style={{ marginRight: 8 }}
//           />
//           <PrimaryButton onClick={() => onSave(selectedColumns)} text="Apply" />
//         </div>
//       )}
//     >
//       <div style={panelContentStyles}>
//         {selectedColumns.map((col: any) => (
//           <div key={col.key} style={{ marginBottom: "25px" }}>
//             <Checkbox
//               label={col.name}
//               checked={col.isFiltered ? col.isVisible : !col.isVisible}
//               disabled={!col.isFiltered}
//               onChange={() => toggleColumnVisibility(col.key)}
//               styles={{
//                 label: checkboxLabelStyles,
//               }}
//             />
//           </div>
//         ))}
//       </div>
//     </Panel>
//   );
// };

// export default MyPanel;

// // import React from "react";
// // import { Panel, PanelType } from "@fluentui/react/lib/Panel";
// // import { PrimaryButton, DefaultButton } from "@fluentui/react/lib/Button";
// // import { Toggle } from "@fluentui/react/lib/Toggle";
// // import { IColumn } from "@fluentui/react";

// // const panelContentStyles = {
// //   padding: "16px",
// //   fontFamily: "Segoe UI, Segoe UI Web (West European)",
// // };

// // interface ColumnCustomizationPanelProps {
// //   columns: IColumn[];
// //   onClose: () => void;
// //   onSave: (selectedColumns: IColumn[]) => void;
// // }

// // const MyPanel: React.FC<ColumnCustomizationPanelProps> = ({
// //   columns,
// //   onClose,
// //   onSave,
// // }) => {
// //   const [selectedColumns, setSelectedColumns] = React.useState<IColumn[]>(() =>
// //     columns.map((col) => ({
// //       ...col,
// //       isVisible: true,
// //     }))
// //   );

// //   const toggleColumnVisibility = (key: any) => {
// //     setSelectedColumns((prevColumns: any) =>
// //       prevColumns.map((col: any) =>
// //         col.key === key ? { ...col, isVisible: !col.isVisible } : col
// //       )
// //     );
// //   };

// //   return (
// //     <Panel
// //       isOpen={true}
// //       type={PanelType.smallFixedFar}
// //       headerText="Column Customization"
// //       onDismiss={onClose}
// //       closeButtonAriaLabel="Close"
// //       isFooterAtBottom={true}
// //       onRenderFooterContent={() => (
// //         <div style={{ display: "flex", justifyContent: "flex-end" }}>
// //           <DefaultButton
// //             onClick={onClose}
// //             text="Cancel"
// //             style={{ marginRight: 8 }}
// //           />
// //           <PrimaryButton onClick={() => onSave(selectedColumns)} text="Apply" />
// //         </div>
// //       )}
// //     >
// //       <div style={panelContentStyles}>
// //         {selectedColumns.map((col: any) => (
// //           <div key={col.key} style={{ marginBottom: "8px" }}>
// //             <Toggle
// //               checked={col.isVisible}
// //               onChange={() => toggleColumnVisibility(col.key)}
// //               label={col.name}
// //               styles={{
// //                 root: { fontFamily: "Segoe UI, Segoe UI Web (West European)" },
// //               }}
// //             />
// //           </div>
// //         ))}
// //       </div>
// //     </Panel>
// //   );
// // };

// // export default MyPanel;

// // import React from "react";
// // import { Panel, PanelType } from "@fluentui/react/lib/Panel";
// // import { PrimaryButton, DefaultButton } from "@fluentui/react/lib/Button";
// // import { IColumn } from "@fluentui/react";

// // interface ColumnCustomizationPanelProps {
// //   columns: IColumn[];
// //   onClose: () => void;
// //   onSave: (selectedColumns: IColumn[]) => void;
// // }

// // const MyPanel: React.FC<ColumnCustomizationPanelProps> = ({
// //   columns,
// //   onClose,
// //   onSave,
// // }) => {
// //   const [selectedColumns, setSelectedColumns] = React.useState<IColumn[]>(() =>
// //     columns.map((col) => ({
// //       ...col,
// //       isVisible: true,
// //     }))
// //   );

// //   const toggleColumnVisibility = (key: any) => {
// //     setSelectedColumns((prevColumns: any) =>
// //       prevColumns.map((col: any) =>
// //         col.key === key ? { ...col, isVisible: !col.isVisible } : col
// //       )
// //     );
// //   };

// //   return (
// //     <Panel
// //       isOpen={true}
// //       type={PanelType.smallFixedFar}
// //       headerText="Column Customization"
// //       onDismiss={onClose}
// //       closeButtonAriaLabel="Close"
// //       isFooterAtBottom={true}
// //       onRenderFooterContent={() => (
// //         <div style={{ display: "flex", justifyContent: "flex-end" }}>
// //           <DefaultButton
// //             onClick={onClose}
// //             text="Cancel"
// //             style={{ marginRight: 8 }}
// //           />
// //           <PrimaryButton onClick={() => onSave(selectedColumns)} text="Apply" />
// //         </div>
// //       )}
// //     >
// //       <div style={{ padding: "16px" }}>
// //         {selectedColumns.map((col: any) => (
// //           <div key={col.key} style={{ marginBottom: "8px" }}>
// //             <label>
// //               <input
// //                 type="checkbox"
// //                 checked={col.isVisible}
// //                 onChange={() => toggleColumnVisibility(col.key)}
// //               />
// //               <span style={{ marginLeft: "8px", fontWeight: "bold" }}>
// //                 {col.name}
// //               </span>
// //             </label>
// //           </div>
// //         ))}
// //       </div>
// //     </Panel>
// //   );
// // };

// // export default MyPanel;


import * as React from "react";
import {
  DetailsList,
  DetailsListLayoutMode,
  Selection,
  SelectionMode,
  IColumn,
} from "@fluentui/react/lib/DetailsList";
import { MarqueeSelection } from "@fluentui/react/lib/MarqueeSelection";
import { mergeStyleSets } from "@fluentui/react/lib/Styling";
import { Panel, PanelType } from "@fluentui/react/lib/Panel";
import { PrimaryButton, DefaultButton } from "@fluentui/react/lib/Button";
import {
  FluentTheme,
  Icon,
  TooltipHost,
  initializeIcons,
} from "@fluentui/react";
import MyPanel from "../MyPanel";
import axios from "axios";

initializeIcons();
interface CustomPanelFooterProps {
  onSave: () => void;
  onCancel: () => void;
}

const CustomPanelFooter: React.FC<CustomPanelFooterProps> = ({
  onSave,
  onCancel,
}) => (
  <div style={{ display: "flex", justifyContent: "flex-end" }}>
    <DefaultButton
      onClick={onCancel}
      text="Cancel"
      style={{ marginRight: 8 }}
    />
    <PrimaryButton onClick={onSave} text="Save" />
  </div>
);

interface IProduct {
  id: number;
  title: string;
  brand: string;
  category: string;
  rating: number;
  stock: number;
  price: number;
  discountPercentage: number;
}

// const columns: IColumn[] = [
//   { key: "id", name: "ID", fieldName: "id", minWidth: 50, maxWidth: 100 },
//   {
//     key: "title",
//     name: "Title",
//     fieldName: "title",
//     minWidth: 100,
//     maxWidth: 200,
//     isResizable: true,
//   },
//   {
//     key: "brand",
//     name: "Brand",
//     fieldName: "brand",
//     minWidth: 100,
//     maxWidth: 150,
//   },

//   {
//     key: "rating",
//     name: "Rating",
//     fieldName: "rating",
//     minWidth: 50,
//     maxWidth: 100,
//   },
//   {
//     key: "price",
//     name: "Price",
//     fieldName: "price",
//     minWidth: 80,
//     maxWidth: 120,
//   },
// ];

const columns1: IColumn[] = [
  { key: "id", name: "ID", fieldName: "id", minWidth: 50, maxWidth: 100 },
  {
    key: "title",
    name: "Title",
    fieldName: "title",
    minWidth: 100,
    maxWidth: 200,
    isResizable: true,
  },
  {
    key: "brand",
    name: "Brand",
    fieldName: "brand",
    minWidth: 100,
    maxWidth: 150,
  },
  {
    key: "category",
    name: "Category",
    fieldName: "category",
    minWidth: 100,
    maxWidth: 150,
  },
  {
    key: "rating",
    name: "Rating",
    fieldName: "rating",
    minWidth: 50,
    maxWidth: 100,
  },
  {
    key: "stock",
    name: "Stock",
    fieldName: "stock",
    minWidth: 50,
    maxWidth: 100,
  },
  {
    key: "price",
    name: "Price",
    fieldName: "price",
    minWidth: 80,
    maxWidth: 120,
  },
  {
    key: "discountPercentage",
    name: "Discount %",
    fieldName: "discountPercentage",
    minWidth: 50,
    maxWidth: 100,
  },
];
const columns: IColumn[] = [
  {
    key: "id",
    name: "ID",
    fieldName: "id",
    minWidth: 50,
    maxWidth: 100,
    isFiltered: false,
  },
  {
    key: "title",
    name: "Title",
    fieldName: "title",
    minWidth: 100,
    maxWidth: 200,
    isResizable: true,
    isFiltered: false,
  },
  {
    key: "brand",
    name: "Brand",
    fieldName: "brand",
    minWidth: 100,
    maxWidth: 150,
    isFiltered: false,
  },

  {
    key: "rating",
    name: "Rating",
    fieldName: "rating",
    minWidth: 50,
    maxWidth: 100,
    isFiltered: false,
  },
  {
    key: "price",
    name: "Price",
    fieldName: "price",
    minWidth: 80,
    maxWidth: 120,
    isFiltered: false,
  },
];

const classNames = mergeStyleSets({
  table: {
    margin: "auto",
  },
});

const MyList = () => {
  const [items, setItems] = React.useState<IProduct[]>([]);
  const [selectionDetails, setSelectionDetails] = React.useState("");
  const [sortedColumn, setSortedColumn] = React.useState<string | undefined>(
    undefined
  );
  const [isSortedDescending, setIsSortedDescending] =
    React.useState<boolean>(false);
  const [isPanelOpen, setIsPanelOpen] = React.useState(false);
  const [selectedItem, setSelectedItem] = React.useState<IProduct | null>(null);

  ////  panel block
  const [isColumnCustomizationPanelOpen, setIsColumnCustomizationPanelOpen] =
    React.useState(false);
  const [Mycolumns, setColumns] = React.useState<IColumn[]>(columns); // Initialize with your initial columns

  const openMyPanel = () => {
    setIsColumnCustomizationPanelOpen(true);
  };

  const closeColumnCustomizationPanel = () => {
    setIsColumnCustomizationPanelOpen(false);
  };

  const applyColumnCustomization = (selectedColumns: any) => {
    //alert("called");
    console.log(selectedColumns);
    //setColumns(selectedColumns);
    closeColumnCustomizationPanel();
  };
  ////

  // React.useEffect(() => {
  //   fetch("https://dummyjson.com/products")
  //     .then((response) => response.json())
  //     .then((data) => setItems(data.products))
  //     .catch((error) => console.error("Error fetching data:", error));
  // }, []);

  const selection = new Selection({
    onSelectionChanged: () => {
      // setSelectionDetails(
      //   selection.getSelectedCount() === 1
      //     ? "1 item selected: " + selection.getSelection()[0]
      //     : `${selection.getSelectedCount()} items selected`
      // );
    },
  });

  const onColumnClick = (
    ev: React.MouseEvent<HTMLElement>,
    column: IColumn
  ): void => {
    const newIsSortedDescending = !isSortedDescending;

    setItems(
      [...items].sort((a, b) => {
        //debugger;
        if (column.key === "id") {
          return newIsSortedDescending ? b.id - a.id : a.id - b.id;
        } else if (column.key === "title") {
          return newIsSortedDescending
            ? b.title.localeCompare(a.title)
            : a.title.localeCompare(b.title);
        } else if (column.key === "brand") {
          return newIsSortedDescending
            ? b.brand.localeCompare(a.brand)
            : a.brand.localeCompare(b.brand);
        } else if (column.key === "category") {
          return newIsSortedDescending
            ? b.category.localeCompare(a.category)
            : a.category.localeCompare(b.category);
        } else if (column.key === "rating") {
          return newIsSortedDescending
            ? b.rating - a.rating
            : a.rating - b.rating;
        } else if (column.key === "stock") {
          return newIsSortedDescending ? b.stock - a.stock : a.stock - b.stock;
        } else if (column.key === "price") {
          return newIsSortedDescending ? b.price - a.price : a.price - b.price;
        } else if (column.key === "discountPercentage") {
          return newIsSortedDescending
            ? b.discountPercentage - a.discountPercentage
            : a.discountPercentage - b.discountPercentage;
        }
        return 0;
      })
    );

    setSortedColumn(column.key);
    setIsSortedDescending(newIsSortedDescending);
  };

  const openPanel = (item: IProduct) => {
    setSelectedItem(item);
    setIsPanelOpen(true);
  };

  const closePanel = () => {
    setSelectedItem(null);
    setIsPanelOpen(false);
  };

  const savePanel = () => {
    // Handle save logic
    closePanel();
  };

  const onSyncClick = () => {
    fetchItems();
  };

  const fetchItems = async () => {
    try {
      const response = await axios.get("https://dummyjson.com/products");

      const fetchedColumns = Object.keys(response.data.products[0]).map(
        (key) => ({
          key: key,
          name: key,
          fieldName: key,
          minWidth: 50,
          maxWidth: 150,
          isFiltered:
            key === "id" || key === "title" || key === "brand" ? false : true,
        })
      );

      setColumns(fetchedColumns);
      setItems(response.data.products);
      console.log(fetchedColumns);
    } catch (error) {
      console.error("Error fetching data:", error);
    }
  };

  React.useEffect(() => {
    //fetchItems();
  }, []);

  // const fetchItems = () => {
  //   fetch("https://dummyjson.com/products")
  //     .then((response) => response.json())
  //     .then((data) => setItems(data.products))
  //     .catch((error) => console.error("Error fetching data:", error));
  // };
  //// columns menu

  //// column menu

  return (
    <div>
      <div
        style={{
          display: "flex",
          alignItems: "center",
          marginBottom: "10px",
          color: FluentTheme.palette.themePrimary,
        }}
      >
        <h5 style={{ marginRight: "auto" }}>MyRequestList</h5>
        <TooltipHost content="Refresh">
          <Icon
            iconName="Sync"
            style={{
              cursor: "pointer",
              color: FluentTheme.palette.themePrimary,
              fontSize: "20px",
              transition: "color 0.3s",
              marginRight: "10px",
            }}
            aria-label="Sync"
            onClick={onSyncClick}
          />
        </TooltipHost>
        <TooltipHost content="Apply Filter">
          <Icon
            iconName="Filter"
            style={{
              cursor: "pointer",
              color: FluentTheme.palette.themePrimary,
              fontSize: "20px",
              transition: "color 0.3s",
            }}
            aria-label="Filter"
          />
        </TooltipHost>
        <TooltipHost content="Customize Columns">
          <Icon
            iconName="Table"
            style={{
              cursor: "pointer",
              color: FluentTheme.palette.themePrimary,
              fontSize: "20px",
              transition: "color 0.3s",
              marginLeft: "10px",
            }}
            onClick={openMyPanel}
          />
        </TooltipHost>

        {isColumnCustomizationPanelOpen && (
          <MyPanel
            headerText="Choose Columns"
            defaultColumnscount={3}
            columns={Mycolumns}
            onClose={closeColumnCustomizationPanel}
            onSave={applyColumnCustomization}
          />
        )}
      </div>

      <div>{selectionDetails}</div>
      <MarqueeSelection selection={selection}>
        <DetailsList
          items={items}
          columns={columns.map((col) => ({
            ...col,
            isSorted: col.key === sortedColumn,
            isSortedDescending: isSortedDescending,
            onColumnClick: onColumnClick,
            onRender: (item?: any, index?: number, column?: IColumn) => {
              if (column && column.key === "title") {
                return (
                  <a href="#" onClick={() => openPanel(item as IProduct)}>
                    {(item as IProduct).title}
                  </a>
                );
              } else {
                const cellValue = item[column?.fieldName as keyof IProduct];
                return <span>{cellValue}</span>;
              }
            },
          }))}
          setKey="set"
          layoutMode={DetailsListLayoutMode.justified}
          selection={selection}
          selectionMode={SelectionMode.multiple}
          isHeaderVisible={true}
          className={classNames.table}
        />
      </MarqueeSelection>
      <Panel
        isOpen={isPanelOpen}
        type={PanelType.smallFixedFar}
        headerText={selectedItem ? selectedItem.title : "Product Details"}
        onDismiss={closePanel}
        closeButtonAriaLabel="Close"
        isFooterAtBottom={true}
        onRenderFooterContent={() => (
          <CustomPanelFooter onSave={savePanel} onCancel={closePanel} />
        )}
      >
        {selectedItem && (
          <div>
            <p>ID: {selectedItem.id}</p>
            <p>Title: {selectedItem.title}</p>
            <p>Brand: {selectedItem.brand}</p>
            <p>Category: {selectedItem.category}</p>
            <p>Rating: {selectedItem.rating}</p>
            <p>Stock: {selectedItem.stock}</p>
            <p>Price: {selectedItem.price}</p>
            <p>Discount %: {selectedItem.discountPercentage}</p>
          </div>
        )}
      </Panel>
    </div>
  );
};

export default MyList;




import * as React from "react";
import {
  DetailsList,
  DetailsListLayoutMode,
  Selection,
  SelectionMode,
  IColumn,
} from "@fluentui/react/lib/DetailsList";
import { MarqueeSelection } from "@fluentui/react/lib/MarqueeSelection";
import { mergeStyleSets } from "@fluentui/react/lib/Styling";
import { Panel, PanelType } from "@fluentui/react/lib/Panel";
import { PrimaryButton, DefaultButton } from "@fluentui/react/lib/Button";
import {
  FluentTheme,
  Icon,
  TooltipHost,
  initializeIcons,
} from "@fluentui/react";
import MyPanel from "../MyPanel";
import axios from "axios";

initializeIcons();
interface CustomPanelFooterProps {
  onSave: () => void;
  onCancel: () => void;
}

const CustomPanelFooter: React.FC<CustomPanelFooterProps> = ({
  onSave,
  onCancel,
}) => (
  <div style={{ display: "flex", justifyContent: "flex-end" }}>
    <DefaultButton
      onClick={onCancel}
      text="Cancel"
      style={{ marginRight: 8 }}
    />
    <PrimaryButton onClick={onSave} text="Save" />
  </div>
);

interface IProduct {
  id: number;
  title: string;
  brand: string;
  category: string;
  rating: number;
  stock: number;
  price: number;
  discountPercentage: number;
}

// const columns: IColumn[] = [
//   { key: "id", name: "ID", fieldName: "id", minWidth: 50, maxWidth: 100 },
//   {
//     key: "title",
//     name: "Title",
//     fieldName: "title",
//     minWidth: 100,
//     maxWidth: 200,
//     isResizable: true,
//   },
//   {
//     key: "brand",
//     name: "Brand",
//     fieldName: "brand",
//     minWidth: 100,
//     maxWidth: 150,
//   },

//   {
//     key: "rating",
//     name: "Rating",
//     fieldName: "rating",
//     minWidth: 50,
//     maxWidth: 100,
//   },
//   {
//     key: "price",
//     name: "Price",
//     fieldName: "price",
//     minWidth: 80,
//     maxWidth: 120,
//   },
// ];

const columns1: IColumn[] = [
  { key: "id", name: "ID", fieldName: "id", minWidth: 50, maxWidth: 100 },
  {
    key: "title",
    name: "Title",
    fieldName: "title",
    minWidth: 100,
    maxWidth: 200,
    isResizable: true,
  },
  {
    key: "brand",
    name: "Brand",
    fieldName: "brand",
    minWidth: 100,
    maxWidth: 150,
  },
  {
    key: "category",
    name: "Category",
    fieldName: "category",
    minWidth: 100,
    maxWidth: 150,
  },
  {
    key: "rating",
    name: "Rating",
    fieldName: "rating",
    minWidth: 50,
    maxWidth: 100,
  },
  {
    key: "stock",
    name: "Stock",
    fieldName: "stock",
    minWidth: 50,
    maxWidth: 100,
  },
  {
    key: "price",
    name: "Price",
    fieldName: "price",
    minWidth: 80,
    maxWidth: 120,
  },
  {
    key: "discountPercentage",
    name: "Discount %",
    fieldName: "discountPercentage",
    minWidth: 50,
    maxWidth: 100,
  },
];
const columns: IColumn[] = [
  {
    key: "id",
    name: "ID",
    fieldName: "id",
    minWidth: 50,
    maxWidth: 100,
    isFiltered: false,
  },
  {
    key: "title",
    name: "Title",
    fieldName: "title",
    minWidth: 100,
    maxWidth: 200,
    isResizable: true,
    isFiltered: false,
  },
  {
    key: "brand",
    name: "Brand",
    fieldName: "brand",
    minWidth: 100,
    maxWidth: 150,
    isFiltered: false,
  },

  {
    key: "rating",
    name: "Rating",
    fieldName: "rating",
    minWidth: 50,
    maxWidth: 100,
    isFiltered: false,
  },
  {
    key: "price",
    name: "Price",
    fieldName: "price",
    minWidth: 80,
    maxWidth: 120,
    isFiltered: false,
  },
];

const classNames = mergeStyleSets({
  table: {
    margin: "auto",
  },
});

const MyList = () => {
  const [items, setItems] = React.useState<IProduct[]>([]);
  const [selectionDetails, setSelectionDetails] = React.useState("");
  const [sortedColumn, setSortedColumn] = React.useState<string | undefined>(
    undefined
  );
  const [isSortedDescending, setIsSortedDescending] =
    React.useState<boolean>(false);
  const [isPanelOpen, setIsPanelOpen] = React.useState(false);
  const [selectedItem, setSelectedItem] = React.useState<IProduct | null>(null);

  ////  panel block
  const [isColumnCustomizationPanelOpen, setIsColumnCustomizationPanelOpen] =
    React.useState(false);
  const [Mycolumns, setColumns] = React.useState<IColumn[]>(columns); // Initialize with your initial columns

  const openMyPanel = () => {
    setIsColumnCustomizationPanelOpen(true);
  };

  const closeColumnCustomizationPanel = () => {
    setIsColumnCustomizationPanelOpen(false);
  };

  const applyColumnCustomization = (selectedColumns: any) => {
    setColumns(selectedColumns);
    closeColumnCustomizationPanel();
  };
  ////

  // React.useEffect(() => {
  //   fetch("https://dummyjson.com/products")
  //     .then((response) => response.json())
  //     .then((data) => setItems(data.products))
  //     .catch((error) => console.error("Error fetching data:", error));
  // }, []);

  const selection = new Selection({
    onSelectionChanged: () => {
      // setSelectionDetails(
      //   selection.getSelectedCount() === 1
      //     ? "1 item selected: " + selection.getSelection()[0]
      //     : `${selection.getSelectedCount()} items selected`
      // );
    },
  });

  const onColumnClick = (
    ev: React.MouseEvent<HTMLElement>,
    column: IColumn
  ): void => {
    const newIsSortedDescending = !isSortedDescending;

    setItems(
      [...items].sort((a, b) => {
        //debugger;
        if (column.key === "id") {
          return newIsSortedDescending ? b.id - a.id : a.id - b.id;
        } else if (column.key === "title") {
          return newIsSortedDescending
            ? b.title.localeCompare(a.title)
            : a.title.localeCompare(b.title);
        } else if (column.key === "brand") {
          return newIsSortedDescending
            ? b.brand.localeCompare(a.brand)
            : a.brand.localeCompare(b.brand);
        } else if (column.key === "category") {
          return newIsSortedDescending
            ? b.category.localeCompare(a.category)
            : a.category.localeCompare(b.category);
        } else if (column.key === "rating") {
          return newIsSortedDescending
            ? b.rating - a.rating
            : a.rating - b.rating;
        } else if (column.key === "stock") {
          return newIsSortedDescending ? b.stock - a.stock : a.stock - b.stock;
        } else if (column.key === "price") {
          return newIsSortedDescending ? b.price - a.price : a.price - b.price;
        } else if (column.key === "discountPercentage") {
          return newIsSortedDescending
            ? b.discountPercentage - a.discountPercentage
            : a.discountPercentage - b.discountPercentage;
        }
        return 0;
      })
    );

    setSortedColumn(column.key);
    setIsSortedDescending(newIsSortedDescending);
  };

  const openPanel = (item: IProduct) => {
    setSelectedItem(item);
    setIsPanelOpen(true);
  };

  const closePanel = () => {
    setSelectedItem(null);
    setIsPanelOpen(false);
  };

  const savePanel = () => {
    // Handle save logic
    closePanel();
  };

  const onSyncClick = () => {
    fetchItems();
  };

  const fetchItems = async () => {
    try {
      const response = await axios.get("https://dummyjson.com/products");

      const fetchedColumns = Object.keys(response.data.products[0]).map(
        (key) => ({
          key: key,
          name: key,
          fieldName: key,
          minWidth: 50,
          maxWidth: 150,
          isFiltered: key === "title" || key === "brand" ? false : true,
        })
      );

      setColumns(fetchedColumns);
      setItems(response.data.products);
      //console.log(fetchedColumns);
    } catch (error) {
      console.error("Error fetching data:", error);
    }
  };

  React.useEffect(() => {
    //fetchItems();
  }, []);

  // const fetchItems = () => {
  //   fetch("https://dummyjson.com/products")
  //     .then((response) => response.json())
  //     .then((data) => setItems(data.products))
  //     .catch((error) => console.error("Error fetching data:", error));
  // };
  //// columns menu

  //// column menu

  return (
    <div>
      <div
        style={{
          display: "flex",
          alignItems: "center",
          marginBottom: "10px",
          color: FluentTheme.palette.themePrimary,
        }}
      >
        <h5 style={{ marginRight: "auto" }}>MyRequestList</h5>
        <TooltipHost content="Refresh">
          <Icon
            iconName="Sync"
            style={{
              cursor: "pointer",
              color: FluentTheme.palette.themePrimary,
              fontSize: "20px",
              transition: "color 0.3s",
              marginRight: "10px",
            }}
            aria-label="Sync"
            onClick={onSyncClick}
          />
        </TooltipHost>
        <TooltipHost content="Apply Filter">
          <Icon
            iconName="Filter"
            style={{
              cursor: "pointer",
              color: FluentTheme.palette.themePrimary, // Change color to Fluent UI primary color
              fontSize: "20px", // Adjust font size as needed
              transition: "color 0.3s", // Add transition effect for color change
            }}
            aria-label="Filter"
          />
        </TooltipHost>
        <TooltipHost content="Customize Columns">
          <Icon
            iconName="Table"
            style={{
              cursor: "pointer",
              color: FluentTheme.palette.themePrimary,
              fontSize: "20px",
              transition: "color 0.3s",
              marginLeft: "10px",
            }}
            onClick={openMyPanel}
          />
        </TooltipHost>

        {isColumnCustomizationPanelOpen && (
          <MyPanel
            headerText="Choose Columns"
            columns={Mycolumns}
            onClose={closeColumnCustomizationPanel}
            onSave={applyColumnCustomization}
          />
        )}
        {/* <TooltipHost content="Customize Columns">
          <Icon
            iconName="Table"
            style={{
              cursor: "pointer",
              color: FluentTheme.palette.themePrimary,
              fontSize: "20px",
              transition: "color 0.3s",
              marginLeft: "10px",
            }}
          />
        </TooltipHost> */}
      </div>
      {/* <div style={{ display: "flex", alignItems: "center", marginBottom: 16 }}>
        <h5
          style={{ marginRight: 16, color: FluentTheme.palette.themePrimary }}
        >
          MyRequests
        </h5>
        <Icon
          iconName="Filter"
          style={{
            fontSize: 20,
            marginRight: 8,
            cursor: "pointer",
            float: "right",
            color: FluentTheme.palette.themePrimary,
          }}
        />
        <Icon iconName="Table" style={{ fontSize: 20, cursor: "pointer" }} />
      </div> */}
      <div>{selectionDetails}</div>
      <MarqueeSelection selection={selection}>
        <DetailsList
          items={items}
          columns={columns.map((col) => ({
            ...col,
            isSorted: col.key === sortedColumn,
            isSortedDescending: isSortedDescending,
            onColumnClick: onColumnClick,
            onRender: (item?: any, index?: number, column?: IColumn) => {
              if (column && column.key === "title") {
                return (
                  <a href="#" onClick={() => openPanel(item as IProduct)}>
                    {(item as IProduct).title}
                  </a>
                );
              } else {
                const cellValue = item[column?.fieldName as keyof IProduct];
                return <span>{cellValue}</span>;
              }
            },
          }))}
          setKey="set"
          layoutMode={DetailsListLayoutMode.justified}
          selection={selection}
          selectionMode={SelectionMode.multiple}
          isHeaderVisible={true}
          className={classNames.table}
        />
      </MarqueeSelection>
      <Panel
        isOpen={isPanelOpen}
        type={PanelType.smallFixedFar}
        headerText={selectedItem ? selectedItem.title : "Product Details"}
        onDismiss={closePanel}
        closeButtonAriaLabel="Close"
        isFooterAtBottom={true}
        onRenderFooterContent={() => (
          <CustomPanelFooter onSave={savePanel} onCancel={closePanel} />
        )}
        // footerButtons={
        //   <div style={{ display: "flex", justifyContent: "flex-end" }}>
        //     <DefaultButton
        //       onClick={closePanel}
        //       text="Cancel"
        //       style={{ marginRight: 8 }}
        //     />
        //     <PrimaryButton onClick={closePanel} text="Save" />
        //   </div>
        // }
      >
        {selectedItem && (
          <div>
            <p>ID: {selectedItem.id}</p>
            <p>Title: {selectedItem.title}</p>
            <p>Brand: {selectedItem.brand}</p>
            <p>Category: {selectedItem.category}</p>
            <p>Rating: {selectedItem.rating}</p>
            <p>Stock: {selectedItem.stock}</p>
            <p>Price: {selectedItem.price}</p>
            <p>Discount %: {selectedItem.discountPercentage}</p>
          </div>
        )}
      </Panel>
    </div>
  );
};

export default MyList;


/////

import React from "react";
import { Panel, PanelType } from "@fluentui/react/lib/Panel";
import { PrimaryButton, DefaultButton } from "@fluentui/react/lib/Button";
import { IColumn } from "@fluentui/react";
import { Checkbox } from "@fluentui/react/lib/Checkbox";

const panelContentStyles = {
  padding: "16px",
};

const checkboxLabelStyles = {
  fontFamily: "Segoe UI, Arial, sans-serif",
  fontWeight: "normal",
  marginLeft: "8px",
};

interface ColumnCustomizationPanelProps {
  headerText: string;
  columns: IColumn[];
  onClose: () => void;
  onSave: (selectedColumns: IColumn[]) => void;
}

const MyPanel: React.FC<ColumnCustomizationPanelProps> = ({
  headerText,
  columns,
  onClose,
  onSave,
}) => {
  const [selectedColumnsMap, setSelectedColumnsMap] = React.useState<
    Map<string, boolean>
  >(new Map());

  // Initialize selectedColumnsMap with disabled columns checked
  React.useEffect(() => {
    const initialSelectedColumns = columns.reduce((map, col) => {
      if (!col.isFiltered) {
        map.set(col.key, true);
      }
      return map;
    }, new Map<string, boolean>());
    setSelectedColumnsMap(initialSelectedColumns);
  }, [columns]);

  const toggleColumnVisibility = (key: string) => {
    setSelectedColumnsMap((prevMap) => {
      const updatedMap = new Map(prevMap);
      updatedMap.set(key, !prevMap.get(key));
      return updatedMap;
    });
  };

  const noOfColumnsSelected = Array.from(selectedColumnsMap.values()).filter(
    Boolean
  ).length;

  return (
    <Panel
      style={{ marginTop: "50px", marginBottom: "40px" }}
      isOpen={true}
      type={PanelType.smallFixedFar}
      headerText={headerText + " (" + noOfColumnsSelected + ")"}
      onDismiss={onClose}
      closeButtonAriaLabel="Close"
      isFooterAtBottom={true}
      onRenderFooterContent={() => (
        <div style={{ display: "flex", justifyContent: "flex-end" }}>
          <DefaultButton
            onClick={onClose}
            text="Cancel"
            style={{ marginRight: 8 }}
          />
          <PrimaryButton onClick={() => onSave(columns)} text="Apply" />
        </div>
      )}
    >
      <div style={panelContentStyles}>
        {columns.map((col) => (
          <div key={col.key} style={{ marginBottom: "25px" }}>
            <Checkbox
              label={col.name}
              checked={selectedColumnsMap.get(col.key) || false}
              disabled={!col.isFiltered}
              onChange={() => toggleColumnVisibility(col.key)}
              styles={{
                label: checkboxLabelStyles,
              }}
            />
          </div>
        ))}
      </div>
    </Panel>
  );
};

export default MyPanel;

// import React from "react";
// import { Panel, PanelType } from "@fluentui/react/lib/Panel";
// import { PrimaryButton, DefaultButton } from "@fluentui/react/lib/Button";
// import { IColumn } from "@fluentui/react";
// import { Checkbox } from "@fluentui/react/lib/Checkbox";

// const panelContentStyles = {
//   padding: "16px",
// };

// const checkboxLabelStyles = {
//   fontFamily: "Segoe UI, Arial, sans-serif",
//   fontWeight: "normal",
//   marginLeft: "8px",
// };

// interface ColumnCustomizationPanelProps {
//   headerText: string;
//   columns: IColumn[];
//   onClose: () => void;
//   onSave: (selectedColumns: IColumn[]) => void;
// }

// const MyPanel: React.FC<ColumnCustomizationPanelProps> = ({
//   headerText,
//   columns,
//   onClose,
//   onSave,
// }) => {
//   const [selectedColumns, setSelectedColumns] = React.useState<IColumn[]>(() =>
//     columns.map((col) => ({
//       ...col,
//       isVisible: false,
//     }))
//   );

//   const toggleColumnVisibility = (key: any) => {
//     //debugger;
//     setSelectedColumns((prevColumns: any) =>
//       prevColumns.map((col: any) =>
//         col.key === key ? { ...col, isVisible: !col.isVisible } : col
//       )
//     );
//   };
//   //let noOfColumnsSelected = 0;
//   //console.log(selectedColumns);
//   const noOfColumnsSelected = selectedColumns.filter(
//     (col) => !col.isFiltered
//   ).length;

//   return (
//     <Panel
//       style={{ marginTop: "50px", marginBottom: "40px" }}
//       isOpen={true}
//       type={PanelType.smallFixedFar}
//       headerText={headerText + " (" + noOfColumnsSelected + ")"}
//       onDismiss={onClose}
//       closeButtonAriaLabel="Close"
//       isFooterAtBottom={true}
//       onRenderFooterContent={() => (
//         <div style={{ display: "flex", justifyContent: "flex-end" }}>
//           <DefaultButton
//             onClick={onClose}
//             text="Cancel"
//             style={{ marginRight: 8 }}
//           />
//           <PrimaryButton onClick={() => onSave(selectedColumns)} text="Apply" />
//         </div>
//       )}
//     >
//       <div style={panelContentStyles}>
//         {selectedColumns.map((col: any) => (
//           <div key={col.key} style={{ marginBottom: "25px" }}>
//             <Checkbox
//               label={col.name}
//               checked={col.isFiltered ? col.isVisible : !col.isVisible}
//               disabled={!col.isFiltered}
//               onChange={() => toggleColumnVisibility(col.key)}
//               styles={{
//                 label: checkboxLabelStyles,
//               }}
//             />
//           </div>
//         ))}
//       </div>
//     </Panel>
//   );
// };

// export default MyPanel;

// // import React from "react";
// // import { Panel, PanelType } from "@fluentui/react/lib/Panel";
// // import { PrimaryButton, DefaultButton } from "@fluentui/react/lib/Button";
// // import { Toggle } from "@fluentui/react/lib/Toggle";
// // import { IColumn } from "@fluentui/react";

// // const panelContentStyles = {
// //   padding: "16px",
// //   fontFamily: "Segoe UI, Segoe UI Web (West European)",
// // };

// // interface ColumnCustomizationPanelProps {
// //   columns: IColumn[];
// //   onClose: () => void;
// //   onSave: (selectedColumns: IColumn[]) => void;
// // }

// // const MyPanel: React.FC<ColumnCustomizationPanelProps> = ({
// //   columns,
// //   onClose,
// //   onSave,
// // }) => {
// //   const [selectedColumns, setSelectedColumns] = React.useState<IColumn[]>(() =>
// //     columns.map((col) => ({
// //       ...col,
// //       isVisible: true,
// //     }))
// //   );

// //   const toggleColumnVisibility = (key: any) => {
// //     setSelectedColumns((prevColumns: any) =>
// //       prevColumns.map((col: any) =>
// //         col.key === key ? { ...col, isVisible: !col.isVisible } : col
// //       )
// //     );
// //   };

// //   return (
// //     <Panel
// //       isOpen={true}
// //       type={PanelType.smallFixedFar}
// //       headerText="Column Customization"
// //       onDismiss={onClose}
// //       closeButtonAriaLabel="Close"
// //       isFooterAtBottom={true}
// //       onRenderFooterContent={() => (
// //         <div style={{ display: "flex", justifyContent: "flex-end" }}>
// //           <DefaultButton
// //             onClick={onClose}
// //             text="Cancel"
// //             style={{ marginRight: 8 }}
// //           />
// //           <PrimaryButton onClick={() => onSave(selectedColumns)} text="Apply" />
// //         </div>
// //       )}
// //     >
// //       <div style={panelContentStyles}>
// //         {selectedColumns.map((col: any) => (
// //           <div key={col.key} style={{ marginBottom: "8px" }}>
// //             <Toggle
// //               checked={col.isVisible}
// //               onChange={() => toggleColumnVisibility(col.key)}
// //               label={col.name}
// //               styles={{
// //                 root: { fontFamily: "Segoe UI, Segoe UI Web (West European)" },
// //               }}
// //             />
// //           </div>
// //         ))}
// //       </div>
// //     </Panel>
// //   );
// // };

// // export default MyPanel;

// // import React from "react";
// // import { Panel, PanelType } from "@fluentui/react/lib/Panel";
// // import { PrimaryButton, DefaultButton } from "@fluentui/react/lib/Button";
// // import { IColumn } from "@fluentui/react";

// // interface ColumnCustomizationPanelProps {
// //   columns: IColumn[];
// //   onClose: () => void;
// //   onSave: (selectedColumns: IColumn[]) => void;
// // }

// // const MyPanel: React.FC<ColumnCustomizationPanelProps> = ({
// //   columns,
// //   onClose,
// //   onSave,
// // }) => {
// //   const [selectedColumns, setSelectedColumns] = React.useState<IColumn[]>(() =>
// //     columns.map((col) => ({
// //       ...col,
// //       isVisible: true,
// //     }))
// //   );

// //   const toggleColumnVisibility = (key: any) => {
// //     setSelectedColumns((prevColumns: any) =>
// //       prevColumns.map((col: any) =>
// //         col.key === key ? { ...col, isVisible: !col.isVisible } : col
// //       )
// //     );
// //   };

// //   return (
// //     <Panel
// //       isOpen={true}
// //       type={PanelType.smallFixedFar}
// //       headerText="Column Customization"
// //       onDismiss={onClose}
// //       closeButtonAriaLabel="Close"
// //       isFooterAtBottom={true}
// //       onRenderFooterContent={() => (
// //         <div style={{ display: "flex", justifyContent: "flex-end" }}>
// //           <DefaultButton
// //             onClick={onClose}
// //             text="Cancel"
// //             style={{ marginRight: 8 }}
// //           />
// //           <PrimaryButton onClick={() => onSave(selectedColumns)} text="Apply" />
// //         </div>
// //       )}
// //     >
// //       <div style={{ padding: "16px" }}>
// //         {selectedColumns.map((col: any) => (
// //           <div key={col.key} style={{ marginBottom: "8px" }}>
// //             <label>
// //               <input
// //                 type="checkbox"
// //                 checked={col.isVisible}
// //                 onChange={() => toggleColumnVisibility(col.key)}
// //               />
// //               <span style={{ marginLeft: "8px", fontWeight: "bold" }}>
// //                 {col.name}
// //               </span>
// //             </label>
// //           </div>
// //         ))}
// //       </div>
// //     </Panel>
// //   );
// // };

// // export default MyPanel;


/////////////////
import * as React from "react";
import {
  DetailsList,
  DetailsListLayoutMode,
  Selection,
  SelectionMode,
  IColumn,
} from "@fluentui/react/lib/DetailsList";
import { MarqueeSelection } from "@fluentui/react/lib/MarqueeSelection";
import { mergeStyleSets } from "@fluentui/react/lib/Styling";
import { Panel, PanelType } from "@fluentui/react/lib/Panel";
import { PrimaryButton, DefaultButton } from "@fluentui/react/lib/Button";
import { Image, ImageFit } from "@fluentui/react/lib/Image";
import {
  initializeIcons,
  CommandBar,
  ICommandBarItemProps,
  Dropdown,
  TextField,
  FluentTheme,
  Checkbox,
} from "@fluentui/react";
import { Icon } from "@fluentui/react/lib/Icon";
initializeIcons();
interface CustomPanelFooterProps {
  onSave: () => void;
  onCancel: () => void;
}

const CustomPanelFooter: React.FC<CustomPanelFooterProps> = ({
  onSave,
  onCancel,
}) => (
  <div style={{ display: "flex", justifyContent: "flex-end" }}>
    <DefaultButton
      onClick={onCancel}
      text="Cancel"
      style={{ marginRight: 8 }}
    />
    <PrimaryButton onClick={onSave} text="Save" />
  </div>
);

interface IProduct {
  id: number;
  title: string;
  brand: string;
  category: string;
  rating: number;
  stock: number;
  price: number;
  discountPercentage: number;
  description: string;
  thumbnail: string;
  images: string[];
}

const columns: IColumn[] = [
  { key: "id", name: "ID", fieldName: "id", minWidth: 50, maxWidth: 100 },
  {
    key: "title",
    name: "Title",
    fieldName: "title",
    minWidth: 100,
    maxWidth: 200,
    isResizable: true,
  },
  {
    key: "brand",
    name: "Brand",
    fieldName: "brand",
    minWidth: 100,
    maxWidth: 150,
  },
  {
    key: "category",
    name: "Category",
    fieldName: "category",
    minWidth: 100,
    maxWidth: 150,
  },
  {
    key: "rating",
    name: "Rating",
    fieldName: "rating",
    minWidth: 50,
    maxWidth: 100,
  },
  {
    key: "stock",
    name: "Stock",
    fieldName: "stock",
    minWidth: 50,
    maxWidth: 100,
  },
  {
    key: "price",
    name: "Price",
    fieldName: "price",
    minWidth: 80,
    maxWidth: 120,
  },
  {
    key: "discountPercentage",
    name: "Discount %",
    fieldName: "discountPercentage",
    minWidth: 50,
    maxWidth: 100,
  },
];
const classNames = mergeStyleSets({
  table: {
    margin: "auto",
  },
});

const MyList = () => {
  const [items, setItems] = React.useState<IProduct[]>([]);
  const [selectionDetails, setSelectionDetails] = React.useState("");
  const [sortedColumn, setSortedColumn] = React.useState<string | undefined>(
    undefined
  );
  const [isSortedDescending, setIsSortedDescending] =
    React.useState<boolean>(false);
  const [isPanelOpen, setIsPanelOpen] = React.useState(false);
  const [selectedItem, setSelectedItem] = React.useState<IProduct | null>(null);

  React.useEffect(() => {
    fetch("https://dummyjson.com/products")
      .then((response) => response.json())
      .then((data) => setItems(data.products))
      .catch((error) => console.error("Error fetching data:", error));
  }, []);

  const selection = new Selection({
    onSelectionChanged: () => {
      setSelectionDetails(
        selection.getSelectedCount() === 1
          ? "1 item selected: " + selection.getSelection()[0]
          : `${selection.getSelectedCount()} items selected`
      );
    },
  });

  const onColumnClick = (
    ev: React.MouseEvent<HTMLElement>,
    column: IColumn
  ): void => {
    const newIsSortedDescending = !isSortedDescending;

    setItems(
      [...items].sort((a, b) => {
        if (column.key === "id") {
          return newIsSortedDescending ? b.id - a.id : a.id - b.id;
        } else if (column.key === "title") {
          return newIsSortedDescending
            ? b.title.localeCompare(a.title)
            : a.title.localeCompare(b.title);
        } else if (column.key === "brand") {
          return newIsSortedDescending
            ? b.brand.localeCompare(a.brand)
            : a.brand.localeCompare(b.brand);
        } else if (column.key === "category") {
          return newIsSortedDescending
            ? b.category.localeCompare(a.category)
            : a.category.localeCompare(b.category);
        } else if (column.key === "rating") {
          return newIsSortedDescending
            ? b.rating - a.rating
            : a.rating - b.rating;
        } else if (column.key === "stock") {
          return newIsSortedDescending ? b.stock - a.stock : a.stock - b.stock;
        } else if (column.key === "price") {
          return newIsSortedDescending ? b.price - a.price : a.price - b.price;
        } else if (column.key === "discountPercentage") {
          return newIsSortedDescending
            ? b.discountPercentage - a.discountPercentage
            : a.discountPercentage - b.discountPercentage;
        }
        return 0;
      })
    );

    setSortedColumn(column.key);
    setIsSortedDescending(newIsSortedDescending);
  };

  const openPanel = (item: IProduct) => {
    setSelectedItem(item);
    setIsPanelOpen(true);
  };

  const closePanel = () => {
    setSelectedItem(null);
    setIsPanelOpen(false);
  };

  const savePanel = () => {
    // Handle save logic
    closePanel();
  };

  const commandBarItems: ICommandBarItemProps[] = [
    {
      key: "view",
      text: "View",
      iconProps: { iconName: "View" },
      onClick: () => handleViewClick(),
    },
    {
      key: "edit",
      text: "Edit",
      iconProps: { iconName: "Edit" },
      onClick: () => handleEditClick(),
      disabled: true,
      styles: {
        root: { cursor: "not-allowed" },
      },
      buttonStyles: {
        labelDisabled: { cursor: "not-allowed" },
        iconDisabled: { cursor: "not-allowed" },
      },
    },
    {
      key: "delete",
      text: "Delete",
      iconProps: { iconName: "Delete" },
      onClick: () => handleDeleteClick(),
    },
    {
      key: "cancel",
      text: "Cancel",
      iconProps: { iconName: "Cancel" },
      onClick: () => handleCancelClick(),
    },
    {
      key: "approve",
      text: "Approve",
      iconProps: { iconName: "CheckMark" },
      onClick: () => handleApproveClick(),
    },
    {
      key: "refresh",
      text: "Refresh",
      iconProps: { iconName: "Refresh" },
      onClick: () => handleRefreshClick(),
    },
  ];

  const handleViewClick = () => {
    // Handle the View action here
  };

  const handleEditClick = () => {
    // Handle the Edit action here
  };

  const handleDeleteClick = () => {
    // Handle the Delete action here
  };

  const handleCancelClick = () => {
    // Handle the Cancel action here
  };

  const handleApproveClick = () => {
    // Handle the Approve action here
  };

  const handleRefreshClick = () => {
    // Handle the Approve action here
  };

  //const [items, setItems] = React.useState<IProduct[]>([]);
  const [isFilterPanelOpen, setIsFilterPanelOpen] = React.useState(false);
  const [filterBrand, setFilterBrand] = React.useState<string | undefined>(
    undefined
  );
  const [filterCategory, setFilterCategory] = React.useState<
    string | undefined
  >(undefined);
  const [filterTitle, setFilterTitle] = React.useState<string | undefined>(
    undefined
  );

  const handleFilterIconClick = () => {
    setIsFilterPanelOpen(true);
  };

  const handleFilterPanelDismiss = () => {
    setIsFilterPanelOpen(false);
  };

  const handleApplyFilter = () => {
    // Apply the filters and fetch the filtered data from the API
    const filteredItems = items.filter((item) => {
      const matchesBrand = !filterBrand || item.brand === filterBrand;
      const matchesCategory =
        !filterCategory || item.category === filterCategory;
      const matchesTitle =
        !filterTitle ||
        item.title.toLowerCase().includes(filterTitle.toLowerCase());
      return matchesBrand && matchesCategory && matchesTitle;
    });

    setItems(filteredItems);
    setIsFilterPanelOpen(false);
  };

  const handleCancelFilter = () => {
    setFilterBrand(undefined);
    setFilterCategory(undefined);
    setFilterTitle(undefined);
    setIsFilterPanelOpen(false);
  };

  //columns filter
  const [columns, setColumns] = React.useState<IColumn[]>([
    // Define your default columns here
    // Example:
    { key: "id", name: "ID", fieldName: "id", minWidth: 50, maxWidth: 100 },
    {
      key: "title",
      name: "Title",
      fieldName: "title",
      minWidth: 100,
      maxWidth: 200,
      isResizable: true,
    },
    // ... (other columns)
  ]);
  const [isColumnPanelOpen, setIsColumnPanelOpen] = React.useState(false);
  const [selectedColumns, setSelectedColumns] = React.useState<string[]>(
    columns.map((col) => col.key)
  );

  // ... (existing code)

  const handleColumnIconClick = () => {
    setIsColumnPanelOpen(true);
  };

  const handleColumnPanelDismiss = () => {
    setIsColumnPanelOpen(false);
  };

  const handleApplyColumns = () => {
    const updatedColumns = columns.filter((col) =>
      selectedColumns.includes(col.key)
    );
    setColumns(updatedColumns);
    setIsColumnPanelOpen(false);
  };
  return (
    <div>
      <div
        style={{ display: "flex", alignItems: "center", marginBottom: "10px" }}
      >
        <h2 style={{ marginRight: "auto" }}>MyRequestList</h2>
        <Icon
          iconName="Filter"
          style={{
            cursor: "pointer",
            color: FluentTheme.palette.themePrimary, // Change color to Fluent UI primary color
            fontSize: "20px", // Adjust font size as needed
            transition: "color 0.3s", // Add transition effect for color change
          }}
          title="Apply Filter"
          onClick={handleFilterIconClick}
        />

        <Icon
          iconName="Table"
          style={{
            cursor: "pointer",
            color: FluentTheme.palette.themePrimary,
            fontSize: "20px",
            transition: "color 0.3s",
            marginLeft: "10px",
          }}
          title="Customize Columns"
          onClick={handleColumnIconClick}
        />
      </div>
      <div>{selectionDetails}</div>
      <MarqueeSelection selection={selection}>
        <DetailsList
          items={items}
          columns={columns.map((col) => ({
            ...col,
            isSorted: col.key === sortedColumn,
            isSortedDescending: isSortedDescending,
            onColumnClick: onColumnClick,
            onRender: (item?: any, index?: number, column?: IColumn) => {
              if (column && column.key === "title") {
                return (
                  <a href="#" onClick={() => openPanel(item as IProduct)}>
                    {(item as IProduct).title}
                  </a>
                );
              } else {
                const cellValue = item[column?.fieldName as keyof IProduct];
                return <span>{cellValue}</span>;
              }
            },
          }))}
          setKey="set"
          layoutMode={DetailsListLayoutMode.justified}
          selection={selection}
          selectionMode={SelectionMode.multiple}
          isHeaderVisible={true}
          className={classNames.table}
        />
      </MarqueeSelection>
      <Panel
        style={{ marginTop: "50px", marginBottom: "40px" }}
        isOpen={isPanelOpen}
        type={PanelType.largeFixed}
        headerText={selectedItem ? selectedItem.title : "Product Details"}
        onDismiss={closePanel}
        closeButtonAriaLabel="Close"
        isFooterAtBottom={true}
        onRenderFooterContent={() => (
          <CustomPanelFooter onSave={savePanel} onCancel={closePanel} />
        )}
      >
        <div style={{ float: "right", marginBottom: "3px" }}>
          <CommandBar items={commandBarItems} />
        </div>

        {selectedItem && (
          <div
            style={{
              display: "grid",
              gridTemplateColumns: "30% 70%",
              gap: "10px",
              marginTop: "30px",
            }}
          >
            <div>
              <p>
                {/* <strong>ID:</strong> */}
                ID
              </p>
              <p>
                {/* <strong>Title:</strong> */}
                Title
              </p>
              <p>
                {/* <strong>Brand:</strong> */}
                Brand
              </p>
              <p>
                <strong>Category:</strong>
              </p>
              <p>
                <strong>Rating:</strong>
              </p>
              <p>
                <strong>Stock:</strong>
              </p>
              <p>
                <strong>Price:</strong>
              </p>
              <p>
                <strong>Discount %:</strong>
              </p>
              <p>
                <strong>Description:</strong>
              </p>
            </div>
            <div>
              <p>{selectedItem.id}</p>
              <p>{selectedItem.title}</p>
              <p>{selectedItem.brand}</p>
              <p>{selectedItem.category}</p>
              <p>{selectedItem.rating}</p>
              <p>{selectedItem.stock}</p>
              <p>{selectedItem.price}</p>
              <p>{selectedItem.discountPercentage}</p>
              <p>{selectedItem.description}</p>
              <div style={{ display: "flex", marginTop: "10px" }}>
                {selectedItem.images.map((image, index) => (
                  <Image
                    key={index}
                    src={image}
                    alt={`Image ${index}`}
                    width={100}
                    height={100}
                    imageFit={ImageFit.cover}
                    style={{ marginRight: 10 }}
                  />
                ))}
              </div>
            </div>
          </div>
        )}
        <div
          style={{ borderBottom: "1px solid #ccc", marginTop: "10px" }}
        ></div>
      </Panel>

      <Panel
        isOpen={isFilterPanelOpen}
        type={PanelType.smallFixedFar}
        style={{ marginTop: "50px", marginBottom: "40px" }}
        headerText="Apply Filters"
        onDismiss={handleFilterPanelDismiss}
        closeButtonAriaLabel="Close"
        onRenderFooterContent={() => (
          <div style={{ display: "flex", justifyContent: "flex-end" }}>
            <DefaultButton
              onClick={handleCancelFilter}
              text="Cancel"
              style={{ marginRight: 8 }}
            />
            <PrimaryButton onClick={handleApplyFilter} text="Apply" />
          </div>
        )}
      >
        <Dropdown
          label="Brand"
          options={[
            { key: "", text: "" },
            { key: "brand1", text: "Brand 1" },
            { key: "brand2", text: "Brand 2" },
            // ... Add more options
          ]}
          selectedKey={filterBrand}
          onChange={(_, option) => setFilterBrand(option?.key as string)}
        />
        <Dropdown
          label="Category"
          options={[
            { key: "", text: "" },
            { key: "category1", text: "Category 1" },
            { key: "category2", text: "Category 2" },
            // ... Add more options
          ]}
          selectedKey={filterCategory}
          onChange={(_, option) => setFilterCategory(option?.key as string)}
        />
        <TextField
          label="Title"
          value={filterTitle}
          onChange={(_, newValue) => setFilterTitle(newValue)}
        />
      </Panel>

      {/* Customize Column Panel */}
      <Panel
        isOpen={isColumnPanelOpen}
        type={PanelType.smallFixedFar}
        style={{ marginTop: "50px", marginBottom: "40px" }}
        headerText="Customize Columns"
        onDismiss={handleColumnPanelDismiss}
        closeButtonAriaLabel="Close"
        onRenderFooterContent={() => (
          <div style={{ display: "flex", justifyContent: "flex-end" }}>
            <DefaultButton
              onClick={handleColumnPanelDismiss}
              text="Cancel"
              style={{ marginRight: 8 }}
            />
            <PrimaryButton onClick={handleApplyColumns} text="Apply" />
          </div>
        )}
      >
        {columns.map((col) => (
          <Checkbox
            key={col.key}
            label={col.name}
            checked={selectedColumns.includes(col.key)}
            onChange={(_: any, checked: any) => {
              if (checked) {
                setSelectedColumns((prevColumns) => [...prevColumns, col.key]);
              } else {
                setSelectedColumns((prevColumns) =>
                  prevColumns.filter((key) => key !== col.key)
                );
              }
            }}
          />
        ))}
      </Panel>
    </div>
  );
};

export default MyList;

/////

import * as React from "react";
import {
  DetailsList,
  DetailsListLayoutMode,
  Selection,
  SelectionMode,
  IColumn,
} from "@fluentui/react/lib/DetailsList";
import { MarqueeSelection } from "@fluentui/react/lib/MarqueeSelection";
import { mergeStyleSets } from "@fluentui/react/lib/Styling";
import { Panel, PanelType } from "@fluentui/react/lib/Panel";
import { PrimaryButton, DefaultButton } from "@fluentui/react/lib/Button";
import { initializeIcons } from "@fluentui/react";
initializeIcons();
interface CustomPanelFooterProps {
  onSave: () => void;
  onCancel: () => void;
}

const CustomPanelFooter: React.FC<CustomPanelFooterProps> = ({
  onSave,
  onCancel,
}) => (
  <div style={{ display: "flex", justifyContent: "flex-end" }}>
    <DefaultButton
      onClick={onCancel}
      text="Cancel"
      style={{ marginRight: 8 }}
    />
    <PrimaryButton onClick={onSave} text="Save" />
  </div>
);

interface IProduct {
  id: number;
  title: string;
  brand: string;
  category: string;
  rating: number;
  stock: number;
  price: number;
  discountPercentage: number;
}

const columns: IColumn[] = [
  { key: "id", name: "ID", fieldName: "id", minWidth: 50, maxWidth: 100 },
  {
    key: "title",
    name: "Title",
    fieldName: "title",
    minWidth: 100,
    maxWidth: 200,
    isResizable: true,
  },
  {
    key: "brand",
    name: "Brand",
    fieldName: "brand",
    minWidth: 100,
    maxWidth: 150,
  },
  {
    key: "category",
    name: "Category",
    fieldName: "category",
    minWidth: 100,
    maxWidth: 150,
  },
  {
    key: "rating",
    name: "Rating",
    fieldName: "rating",
    minWidth: 50,
    maxWidth: 100,
  },
  {
    key: "stock",
    name: "Stock",
    fieldName: "stock",
    minWidth: 50,
    maxWidth: 100,
  },
  {
    key: "price",
    name: "Price",
    fieldName: "price",
    minWidth: 80,
    maxWidth: 120,
  },
  {
    key: "discountPercentage",
    name: "Discount %",
    fieldName: "discountPercentage",
    minWidth: 50,
    maxWidth: 100,
  },
];

const classNames = mergeStyleSets({
  table: {
    margin: "auto",
  },
});

const MyList = () => {
  const [items, setItems] = React.useState<IProduct[]>([]);
  const [selectionDetails, setSelectionDetails] = React.useState("");
  const [sortedColumn, setSortedColumn] = React.useState<string | undefined>(
    undefined
  );
  const [isSortedDescending, setIsSortedDescending] =
    React.useState<boolean>(false);
  const [isPanelOpen, setIsPanelOpen] = React.useState(false);
  const [selectedItem, setSelectedItem] = React.useState<IProduct | null>(null);

  React.useEffect(() => {
    fetch("https://dummyjson.com/products")
      .then((response) => response.json())
      .then((data) => setItems(data.products))
      .catch((error) => console.error("Error fetching data:", error));
  }, []);

  const selection = new Selection({
    onSelectionChanged: () => {
      // setSelectionDetails(
      //   selection.getSelectedCount() === 1
      //     ? "1 item selected: " + selection.getSelection()[0]
      //     : `${selection.getSelectedCount()} items selected`
      // );
    },
  });

  const onColumnClick = (
    ev: React.MouseEvent<HTMLElement>,
    column: IColumn
  ): void => {
    const newIsSortedDescending = !isSortedDescending;

    setItems(
      [...items].sort((a, b) => {
        //debugger;
        if (column.key === "id") {
          return newIsSortedDescending ? b.id - a.id : a.id - b.id;
        } else if (column.key === "title") {
          return newIsSortedDescending
            ? b.title.localeCompare(a.title)
            : a.title.localeCompare(b.title);
        } else if (column.key === "brand") {
          return newIsSortedDescending
            ? b.brand.localeCompare(a.brand)
            : a.brand.localeCompare(b.brand);
        } else if (column.key === "category") {
          return newIsSortedDescending
            ? b.category.localeCompare(a.category)
            : a.category.localeCompare(b.category);
        } else if (column.key === "rating") {
          return newIsSortedDescending
            ? b.rating - a.rating
            : a.rating - b.rating;
        } else if (column.key === "stock") {
          return newIsSortedDescending ? b.stock - a.stock : a.stock - b.stock;
        } else if (column.key === "price") {
          return newIsSortedDescending ? b.price - a.price : a.price - b.price;
        } else if (column.key === "discountPercentage") {
          return newIsSortedDescending
            ? b.discountPercentage - a.discountPercentage
            : a.discountPercentage - b.discountPercentage;
        }
        return 0;
      })
    );

    setSortedColumn(column.key);
    setIsSortedDescending(newIsSortedDescending);
  };

  const openPanel = (item: IProduct) => {
    setSelectedItem(item);
    setIsPanelOpen(true);
  };

  const closePanel = () => {
    setSelectedItem(null);
    setIsPanelOpen(false);
  };

  const savePanel = () => {
    // Handle save logic
    closePanel();
  };

  return (
    <div>
      <div>{selectionDetails}</div>
      <MarqueeSelection selection={selection}>
        <DetailsList
          items={items}
          columns={columns.map((col) => ({
            ...col,
            isSorted: col.key === sortedColumn,
            isSortedDescending: isSortedDescending,
            onColumnClick: onColumnClick,
            onRender: (item?: any, index?: number, column?: IColumn) => {
              if (column && column.key === "title") {
                return (
                  <a href="#" onClick={() => openPanel(item as IProduct)}>
                    {(item as IProduct).title}
                  </a>
                );
              } else {
                const cellValue = item[column?.fieldName as keyof IProduct];
                return <span>{cellValue}</span>;
              }
            },
          }))}
          setKey="set"
          layoutMode={DetailsListLayoutMode.justified}
          selection={selection}
          selectionMode={SelectionMode.multiple}
          isHeaderVisible={true}
          className={classNames.table}
        />
      </MarqueeSelection>
      <Panel
        isOpen={isPanelOpen}
        type={PanelType.smallFixedFar}
        headerText={selectedItem ? selectedItem.title : "Product Details"}
        onDismiss={closePanel}
        closeButtonAriaLabel="Close"
        isFooterAtBottom={true}
        onRenderFooterContent={() => (
          <CustomPanelFooter onSave={savePanel} onCancel={closePanel} />
        )}
        // footerButtons={
        //   <div style={{ display: "flex", justifyContent: "flex-end" }}>
        //     <DefaultButton
        //       onClick={closePanel}
        //       text="Cancel"
        //       style={{ marginRight: 8 }}
        //     />
        //     <PrimaryButton onClick={closePanel} text="Save" />
        //   </div>
        // }
      >
        {selectedItem && (
          <div>
            <p>ID: {selectedItem.id}</p>
            <p>Title: {selectedItem.title}</p>
            <p>Brand: {selectedItem.brand}</p>
            <p>Category: {selectedItem.category}</p>
            <p>Rating: {selectedItem.rating}</p>
            <p>Stock: {selectedItem.stock}</p>
            <p>Price: {selectedItem.price}</p>
            <p>Discount %: {selectedItem.discountPercentage}</p>
          </div>
        )}
      </Panel>
    </div>
  );
};

export default MyList;



/////////////////////
import * as React from "react";
import {
  DetailsList,
  DetailsListLayoutMode,
  Selection,
  SelectionMode,
  IColumn,
} from "@fluentui/react/lib/DetailsList";
import { MarqueeSelection } from "@fluentui/react/lib/MarqueeSelection";
import { mergeStyleSets } from "@fluentui/react/lib/Styling";
import { Panel, PanelType } from "@fluentui/react/lib/Panel";
import { PrimaryButton, DefaultButton } from "@fluentui/react/lib/Button";
import { Image, ImageFit } from "@fluentui/react/lib/Image";
import {
  initializeIcons,
  CommandBar,
  ICommandBarItemProps,
  Dropdown,
  TextField,
  FluentTheme,
  Checkbox,
} from "@fluentui/react";
import { Icon } from "@fluentui/react/lib/Icon";
initializeIcons();
interface CustomPanelFooterProps {
  onSave: () => void;
  onCancel: () => void;
}

const CustomPanelFooter: React.FC<CustomPanelFooterProps> = ({
  onSave,
  onCancel,
}) => (
  <div style={{ display: "flex", justifyContent: "flex-end" }}>
    <DefaultButton
      onClick={onCancel}
      text="Cancel"
      style={{ marginRight: 8 }}
    />
    <PrimaryButton onClick={onSave} text="Save" />
  </div>
);

interface IProduct {
  id: number;
  title: string;
  brand: string;
  category: string;
  rating: number;
  stock: number;
  price: number;
  discountPercentage: number;
  description: string;
  thumbnail: string;
  images: string[];
}

const columns: IColumn[] = [
  { key: "id", name: "ID", fieldName: "id", minWidth: 50, maxWidth: 100 },
  {
    key: "title",
    name: "Title",
    fieldName: "title",
    minWidth: 100,
    maxWidth: 200,
    isResizable: true,
  },
  {
    key: "brand",
    name: "Brand",
    fieldName: "brand",
    minWidth: 100,
    maxWidth: 150,
  },
  {
    key: "category",
    name: "Category",
    fieldName: "category",
    minWidth: 100,
    maxWidth: 150,
  },
  {
    key: "rating",
    name: "Rating",
    fieldName: "rating",
    minWidth: 50,
    maxWidth: 100,
  },
  {
    key: "stock",
    name: "Stock",
    fieldName: "stock",
    minWidth: 50,
    maxWidth: 100,
  },
  {
    key: "price",
    name: "Price",
    fieldName: "price",
    minWidth: 80,
    maxWidth: 120,
  },
  {
    key: "discountPercentage",
    name: "Discount %",
    fieldName: "discountPercentage",
    minWidth: 50,
    maxWidth: 100,
  },
];
const classNames = mergeStyleSets({
  table: {
    margin: "auto",
  },
});

const MyList = () => {
  const [items, setItems] = React.useState<IProduct[]>([]);
  const [selectionDetails, setSelectionDetails] = React.useState("");
  const [sortedColumn, setSortedColumn] = React.useState<string | undefined>(
    undefined
  );
  const [isSortedDescending, setIsSortedDescending] =
    React.useState<boolean>(false);
  const [isPanelOpen, setIsPanelOpen] = React.useState(false);
  const [selectedItem, setSelectedItem] = React.useState<IProduct | null>(null);

  React.useEffect(() => {
    fetch("https://dummyjson.com/products")
      .then((response) => response.json())
      .then((data) => setItems(data.products))
      .catch((error) => console.error("Error fetching data:", error));
  }, []);

  const selection = new Selection({
    onSelectionChanged: () => {
      setSelectionDetails(
        selection.getSelectedCount() === 1
          ? "1 item selected: " + selection.getSelection()[0]
          : `${selection.getSelectedCount()} items selected`
      );
    },
  });

  const onColumnClick = (
    ev: React.MouseEvent<HTMLElement>,
    column: IColumn
  ): void => {
    const newIsSortedDescending = !isSortedDescending;

    setItems(
      [...items].sort((a, b) => {
        if (column.key === "id") {
          return newIsSortedDescending ? b.id - a.id : a.id - b.id;
        } else if (column.key === "title") {
          return newIsSortedDescending
            ? b.title.localeCompare(a.title)
            : a.title.localeCompare(b.title);
        } else if (column.key === "brand") {
          return newIsSortedDescending
            ? b.brand.localeCompare(a.brand)
            : a.brand.localeCompare(b.brand);
        } else if (column.key === "category") {
          return newIsSortedDescending
            ? b.category.localeCompare(a.category)
            : a.category.localeCompare(b.category);
        } else if (column.key === "rating") {
          return newIsSortedDescending
            ? b.rating - a.rating
            : a.rating - b.rating;
        } else if (column.key === "stock") {
          return newIsSortedDescending ? b.stock - a.stock : a.stock - b.stock;
        } else if (column.key === "price") {
          return newIsSortedDescending ? b.price - a.price : a.price - b.price;
        } else if (column.key === "discountPercentage") {
          return newIsSortedDescending
            ? b.discountPercentage - a.discountPercentage
            : a.discountPercentage - b.discountPercentage;
        }
        return 0;
      })
    );

    setSortedColumn(column.key);
    setIsSortedDescending(newIsSortedDescending);
  };

  const openPanel = (item: IProduct) => {
    setSelectedItem(item);
    setIsPanelOpen(true);
  };

  const closePanel = () => {
    setSelectedItem(null);
    setIsPanelOpen(false);
  };

  const savePanel = () => {
    // Handle save logic
    closePanel();
  };

  const commandBarItems: ICommandBarItemProps[] = [
    {
      key: "view",
      text: "View",
      iconProps: { iconName: "View" },
      onClick: () => handleViewClick(),
    },
    {
      key: "edit",
      text: "Edit",
      iconProps: { iconName: "Edit" },
      onClick: () => handleEditClick(),
      disabled: true,
      styles: {
        root: { cursor: "not-allowed" },
      },
      buttonStyles: {
        labelDisabled: { cursor: "not-allowed" },
        iconDisabled: { cursor: "not-allowed" },
      },
    },
    {
      key: "delete",
      text: "Delete",
      iconProps: { iconName: "Delete" },
      onClick: () => handleDeleteClick(),
    },
    {
      key: "cancel",
      text: "Cancel",
      iconProps: { iconName: "Cancel" },
      onClick: () => handleCancelClick(),
    },
    {
      key: "approve",
      text: "Approve",
      iconProps: { iconName: "CheckMark" },
      onClick: () => handleApproveClick(),
    },
    {
      key: "refresh",
      text: "Refresh",
      iconProps: { iconName: "Refresh" },
      onClick: () => handleRefreshClick(),
    },
  ];

  const handleViewClick = () => {
    // Handle the View action here
  };

  const handleEditClick = () => {
    // Handle the Edit action here
  };

  const handleDeleteClick = () => {
    // Handle the Delete action here
  };

  const handleCancelClick = () => {
    // Handle the Cancel action here
  };

  const handleApproveClick = () => {
    // Handle the Approve action here
  };

  const handleRefreshClick = () => {
    // Handle the Approve action here
  };

  //const [items, setItems] = React.useState<IProduct[]>([]);
  const [isFilterPanelOpen, setIsFilterPanelOpen] = React.useState(false);
  const [filterBrand, setFilterBrand] = React.useState<string | undefined>(
    undefined
  );
  const [filterCategory, setFilterCategory] = React.useState<
    string | undefined
  >(undefined);
  const [filterTitle, setFilterTitle] = React.useState<string | undefined>(
    undefined
  );

  const handleFilterIconClick = () => {
    setIsFilterPanelOpen(true);
  };

  const handleFilterPanelDismiss = () => {
    setIsFilterPanelOpen(false);
  };

  const handleApplyFilter = () => {
    // Apply the filters and fetch the filtered data from the API
    const filteredItems = items.filter((item) => {
      const matchesBrand = !filterBrand || item.brand === filterBrand;
      const matchesCategory =
        !filterCategory || item.category === filterCategory;
      const matchesTitle =
        !filterTitle ||
        item.title.toLowerCase().includes(filterTitle.toLowerCase());
      return matchesBrand && matchesCategory && matchesTitle;
    });

    setItems(filteredItems);
    setIsFilterPanelOpen(false);
  };

  const handleCancelFilter = () => {
    setFilterBrand(undefined);
    setFilterCategory(undefined);
    setFilterTitle(undefined);
    setIsFilterPanelOpen(false);
  };

  //columns filter
  const [columns, setColumns] = React.useState<IColumn[]>([
    // Define your default columns here
    // Example:
    { key: "id", name: "ID", fieldName: "id", minWidth: 50, maxWidth: 100 },
    {
      key: "title",
      name: "Title",
      fieldName: "title",
      minWidth: 100,
      maxWidth: 200,
      isResizable: true,
    },
    // ... (other columns)
  ]);
  const [isColumnPanelOpen, setIsColumnPanelOpen] = React.useState(false);
  const [selectedColumns, setSelectedColumns] = React.useState<string[]>(
    columns.map((col) => col.key)
  );

  // ... (existing code)

  const handleColumnIconClick = () => {
    setIsColumnPanelOpen(true);
  };

  const handleColumnPanelDismiss = () => {
    setIsColumnPanelOpen(false);
  };

  const handleApplyColumns = () => {
    const updatedColumns = columns.filter((col) =>
      selectedColumns.includes(col.key)
    );
    setColumns(updatedColumns);
    setIsColumnPanelOpen(false);
  };
  return (
    <div>
      <div
        style={{ display: "flex", alignItems: "center", marginBottom: "10px" }}
      >
        <h2 style={{ marginRight: "auto" }}>MyRequestList</h2>
        <Icon
          iconName="Filter"
          style={{
            cursor: "pointer",
            color: FluentTheme.palette.themePrimary, // Change color to Fluent UI primary color
            fontSize: "20px", // Adjust font size as needed
            transition: "color 0.3s", // Add transition effect for color change
          }}
          title="Apply Filter"
          onClick={handleFilterIconClick}
        />

        <Icon
          iconName="Table"
          style={{
            cursor: "pointer",
            color: FluentTheme.palette.themePrimary,
            fontSize: "20px",
            transition: "color 0.3s",
            marginLeft: "10px",
          }}
          title="Customize Columns"
          onClick={handleColumnIconClick}
        />
      </div>
      <div>{selectionDetails}</div>
      <MarqueeSelection selection={selection}>
        <DetailsList
          items={items}
          columns={columns.map((col) => ({
            ...col,
            isSorted: col.key === sortedColumn,
            isSortedDescending: isSortedDescending,
            onColumnClick: onColumnClick,
            onRender: (item?: any, index?: number, column?: IColumn) => {
              if (column && column.key === "title") {
                return (
                  <a href="#" onClick={() => openPanel(item as IProduct)}>
                    {(item as IProduct).title}
                  </a>
                );
              } else {
                const cellValue = item[column?.fieldName as keyof IProduct];
                return <span>{cellValue}</span>;
              }
            },
          }))}
          setKey="set"
          layoutMode={DetailsListLayoutMode.justified}
          selection={selection}
          selectionMode={SelectionMode.multiple}
          isHeaderVisible={true}
          className={classNames.table}
        />
      </MarqueeSelection>
      <Panel
        style={{ marginTop: "50px", marginBottom: "40px" }}
        isOpen={isPanelOpen}
        type={PanelType.largeFixed}
        headerText={selectedItem ? selectedItem.title : "Product Details"}
        onDismiss={closePanel}
        closeButtonAriaLabel="Close"
        isFooterAtBottom={true}
        onRenderFooterContent={() => (
          <CustomPanelFooter onSave={savePanel} onCancel={closePanel} />
        )}
      >
        <div style={{ float: "right", marginBottom: "3px" }}>
          <CommandBar items={commandBarItems} />
        </div>

        {selectedItem && (
          <div
            style={{
              display: "grid",
              gridTemplateColumns: "30% 70%",
              gap: "10px",
              marginTop: "30px",
            }}
          >
            <div>
              <p>
                {/* <strong>ID:</strong> */}
                ID
              </p>
              <p>
                {/* <strong>Title:</strong> */}
                Title
              </p>
              <p>
                {/* <strong>Brand:</strong> */}
                Brand
              </p>
              <p>
                <strong>Category:</strong>
              </p>
              <p>
                <strong>Rating:</strong>
              </p>
              <p>
                <strong>Stock:</strong>
              </p>
              <p>
                <strong>Price:</strong>
              </p>
              <p>
                <strong>Discount %:</strong>
              </p>
              <p>
                <strong>Description:</strong>
              </p>
            </div>
            <div>
              <p>{selectedItem.id}</p>
              <p>{selectedItem.title}</p>
              <p>{selectedItem.brand}</p>
              <p>{selectedItem.category}</p>
              <p>{selectedItem.rating}</p>
              <p>{selectedItem.stock}</p>
              <p>{selectedItem.price}</p>
              <p>{selectedItem.discountPercentage}</p>
              <p>{selectedItem.description}</p>
              <div style={{ display: "flex", marginTop: "10px" }}>
                {selectedItem.images.map((image, index) => (
                  <Image
                    key={index}
                    src={image}
                    alt={`Image ${index}`}
                    width={100}
                    height={100}
                    imageFit={ImageFit.cover}
                    style={{ marginRight: 10 }}
                  />
                ))}
              </div>
            </div>
          </div>
        )}
        <div
          style={{ borderBottom: "1px solid #ccc", marginTop: "10px" }}
        ></div>
      </Panel>

      <Panel
        isOpen={isFilterPanelOpen}
        type={PanelType.smallFixedFar}
        style={{ marginTop: "50px", marginBottom: "40px" }}
        headerText="Apply Filters"
        onDismiss={handleFilterPanelDismiss}
        closeButtonAriaLabel="Close"
        onRenderFooterContent={() => (
          <div style={{ display: "flex", justifyContent: "flex-end" }}>
            <DefaultButton
              onClick={handleCancelFilter}
              text="Cancel"
              style={{ marginRight: 8 }}
            />
            <PrimaryButton onClick={handleApplyFilter} text="Apply" />
          </div>
        )}
      >
        <Dropdown
          label="Brand"
          options={[
            { key: "", text: "" },
            { key: "brand1", text: "Brand 1" },
            { key: "brand2", text: "Brand 2" },
            // ... Add more options
          ]}
          selectedKey={filterBrand}
          onChange={(_, option) => setFilterBrand(option?.key as string)}
        />
        <Dropdown
          label="Category"
          options={[
            { key: "", text: "" },
            { key: "category1", text: "Category 1" },
            { key: "category2", text: "Category 2" },
            // ... Add more options
          ]}
          selectedKey={filterCategory}
          onChange={(_, option) => setFilterCategory(option?.key as string)}
        />
        <TextField
          label="Title"
          value={filterTitle}
          onChange={(_, newValue) => setFilterTitle(newValue)}
        />
      </Panel>

      {/* Customize Column Panel */}
      <Panel
        isOpen={isColumnPanelOpen}
        type={PanelType.smallFixedFar}
        style={{ marginTop: "50px", marginBottom: "40px" }}
        headerText="Customize Columns"
        onDismiss={handleColumnPanelDismiss}
        closeButtonAriaLabel="Close"
        onRenderFooterContent={() => (
          <div style={{ display: "flex", justifyContent: "flex-end" }}>
            <DefaultButton
              onClick={handleColumnPanelDismiss}
              text="Cancel"
              style={{ marginRight: 8 }}
            />
            <PrimaryButton onClick={handleApplyColumns} text="Apply" />
          </div>
        )}
      >
        {columns.map((col) => (
          <Checkbox
            key={col.key}
            label={col.name}
            checked={selectedColumns.includes(col.key)}
            onChange={(_: any, checked: any) => {
              if (checked) {
                setSelectedColumns((prevColumns) => [...prevColumns, col.key]);
              } else {
                setSelectedColumns((prevColumns) =>
                  prevColumns.filter((key) => key !== col.key)
                );
              }
            }}
          />
        ))}
      </Panel>
    </div>
  );
};

export default MyList;


/////////////////////////////

import * as React from "react";
import {
  DetailsList,
  DetailsListLayoutMode,
  Selection,
  SelectionMode,
  IColumn,
} from "@fluentui/react/lib/DetailsList";
import { MarqueeSelection } from "@fluentui/react/lib/MarqueeSelection";
import { mergeStyleSets } from "@fluentui/react/lib/Styling";
import { Panel, PanelType } from "@fluentui/react/lib/Panel";
import { PrimaryButton, DefaultButton } from "@fluentui/react/lib/Button";
import { Image, ImageFit } from "@fluentui/react/lib/Image";
import {
  initializeIcons,
  CommandBar,
  ICommandBarItemProps,
} from "@fluentui/react";
initializeIcons();
interface CustomPanelFooterProps {
  onSave: () => void;
  onCancel: () => void;
}

const CustomPanelFooter: React.FC<CustomPanelFooterProps> = ({
  onSave,
  onCancel,
}) => (
  <div style={{ display: "flex", justifyContent: "flex-end" }}>
    <DefaultButton
      onClick={onCancel}
      text="Cancel"
      style={{ marginRight: 8 }}
    />
    <PrimaryButton onClick={onSave} text="Save" />
  </div>
);

interface IProduct {
  id: number;
  title: string;
  brand: string;
  category: string;
  rating: number;
  stock: number;
  price: number;
  discountPercentage: number;
  description: string;
  thumbnail: string;
  images: string[];
}

const columns: IColumn[] = [
  { key: "id", name: "ID", fieldName: "id", minWidth: 50, maxWidth: 100 },
  {
    key: "title",
    name: "Title",
    fieldName: "title",
    minWidth: 100,
    maxWidth: 200,
    isResizable: true,
  },
  {
    key: "brand",
    name: "Brand",
    fieldName: "brand",
    minWidth: 100,
    maxWidth: 150,
  },
  {
    key: "category",
    name: "Category",
    fieldName: "category",
    minWidth: 100,
    maxWidth: 150,
  },
  {
    key: "rating",
    name: "Rating",
    fieldName: "rating",
    minWidth: 50,
    maxWidth: 100,
  },
  {
    key: "stock",
    name: "Stock",
    fieldName: "stock",
    minWidth: 50,
    maxWidth: 100,
  },
  {
    key: "price",
    name: "Price",
    fieldName: "price",
    minWidth: 80,
    maxWidth: 120,
  },
  {
    key: "discountPercentage",
    name: "Discount %",
    fieldName: "discountPercentage",
    minWidth: 50,
    maxWidth: 100,
  },
];
const classNames = mergeStyleSets({
  table: {
    margin: "auto",
  },
});

const MyList = () => {
  const [items, setItems] = React.useState<IProduct[]>([]);
  const [selectionDetails, setSelectionDetails] = React.useState("");
  const [sortedColumn, setSortedColumn] = React.useState<string | undefined>(
    undefined
  );
  const [isSortedDescending, setIsSortedDescending] =
    React.useState<boolean>(false);
  const [isPanelOpen, setIsPanelOpen] = React.useState(false);
  const [selectedItem, setSelectedItem] = React.useState<IProduct | null>(null);

  React.useEffect(() => {
    fetch("https://dummyjson.com/products")
      .then((response) => response.json())
      .then((data) => setItems(data.products))
      .catch((error) => console.error("Error fetching data:", error));
  }, []);

  const selection = new Selection({
    onSelectionChanged: () => {
      setSelectionDetails(
        selection.getSelectedCount() === 1
          ? "1 item selected: " + selection.getSelection()[0]
          : `${selection.getSelectedCount()} items selected`
      );
    },
  });

  const onColumnClick = (
    ev: React.MouseEvent<HTMLElement>,
    column: IColumn
  ): void => {
    const newIsSortedDescending = !isSortedDescending;

    setItems(
      [...items].sort((a, b) => {
        if (column.key === "id") {
          return newIsSortedDescending ? b.id - a.id : a.id - b.id;
        } else if (column.key === "title") {
          return newIsSortedDescending
            ? b.title.localeCompare(a.title)
            : a.title.localeCompare(b.title);
        } else if (column.key === "brand") {
          return newIsSortedDescending
            ? b.brand.localeCompare(a.brand)
            : a.brand.localeCompare(b.brand);
        } else if (column.key === "category") {
          return newIsSortedDescending
            ? b.category.localeCompare(a.category)
            : a.category.localeCompare(b.category);
        } else if (column.key === "rating") {
          return newIsSortedDescending
            ? b.rating - a.rating
            : a.rating - b.rating;
        } else if (column.key === "stock") {
          return newIsSortedDescending ? b.stock - a.stock : a.stock - b.stock;
        } else if (column.key === "price") {
          return newIsSortedDescending ? b.price - a.price : a.price - b.price;
        } else if (column.key === "discountPercentage") {
          return newIsSortedDescending
            ? b.discountPercentage - a.discountPercentage
            : a.discountPercentage - b.discountPercentage;
        }
        return 0;
      })
    );

    setSortedColumn(column.key);
    setIsSortedDescending(newIsSortedDescending);
  };

  const openPanel = (item: IProduct) => {
    setSelectedItem(item);
    setIsPanelOpen(true);
  };

  const closePanel = () => {
    setSelectedItem(null);
    setIsPanelOpen(false);
  };

  const savePanel = () => {
    // Handle save logic
    closePanel();
  };

  const commandBarItems: ICommandBarItemProps[] = [
    {
      key: "view",
      text: "View",
      iconProps: { iconName: "View" },
      onClick: () => handleViewClick(),
    },
    {
      key: "edit",
      text: "Edit",
      iconProps: { iconName: "Edit" },
      onClick: () => handleEditClick(),
    },
    {
      key: "delete",
      text: "Delete",
      iconProps: { iconName: "Delete" },
      onClick: () => handleDeleteClick(),
    },
    {
      key: "cancel",
      text: "Cancel",
      iconProps: { iconName: "Cancel" },
      onClick: () => handleCancelClick(),
    },
    {
      key: "approve",
      text: "Approve",
      iconProps: { iconName: "CheckMark" },
      onClick: () => handleApproveClick(),
    },
    {
      key: "refresh",
      text: "Refresh",
      iconProps: { iconName: "Refresh" },
      onClick: () => handleRefreshClick(),
    },
  ];

  const handleViewClick = () => {
    // Handle the View action here
  };

  const handleEditClick = () => {
    // Handle the Edit action here
  };

  const handleDeleteClick = () => {
    // Handle the Delete action here
  };

  const handleCancelClick = () => {
    // Handle the Cancel action here
  };

  const handleApproveClick = () => {
    // Handle the Approve action here
  };

  const handleRefreshClick = () => {
    // Handle the Approve action here
  };

  return (
    <div>
      <div>{selectionDetails}</div>
      <MarqueeSelection selection={selection}>
        <DetailsList
          items={items}
          columns={columns.map((col) => ({
            ...col,
            isSorted: col.key === sortedColumn,
            isSortedDescending: isSortedDescending,
            onColumnClick: onColumnClick,
            onRender: (item?: any, index?: number, column?: IColumn) => {
              if (column && column.key === "title") {
                return (
                  <a href="#" onClick={() => openPanel(item as IProduct)}>
                    {(item as IProduct).title}
                  </a>
                );
              } else {
                const cellValue = item[column?.fieldName as keyof IProduct];
                return <span>{cellValue}</span>;
              }
            },
          }))}
          setKey="set"
          layoutMode={DetailsListLayoutMode.justified}
          selection={selection}
          selectionMode={SelectionMode.multiple}
          isHeaderVisible={true}
          className={classNames.table}
        />
      </MarqueeSelection>
      <Panel
        style={{ marginTop: "50px", marginBottom: "40px" }}
        isOpen={isPanelOpen}
        type={PanelType.largeFixed}
        headerText={selectedItem ? selectedItem.title : "Product Details"}
        // onRenderHeader={(props, defaultRender) => (
        //   <div
        //     style={{
        //       borderBottom: "2px solid rgb(0, 120, 212)",
        //       display: "flex",
        //       justifyContent: "space-between",
        //       alignItems: "center",
        //       padding: "0px 20px",
        //     }}
        //   >
        //     <div style={{ float: "left" }}>
        //       <DefaultButton
        //         text={selectedItem ? selectedItem.title : "Product Details"}
        //         styles={{ root: { border: "none" } }}
        //       />
        //     </div>
        //     <div style={{ float: "right" }}>{defaultRender!(props)}</div>
        //   </div>
        // )}
        onDismiss={closePanel}
        closeButtonAriaLabel="Close"
        isFooterAtBottom={true}
        onRenderFooterContent={() => (
          <CustomPanelFooter onSave={savePanel} onCancel={closePanel} />
        )}
      >
        <div style={{ float: "right", marginBottom: "3px" }}>
          {/*style={{ float: "right" }} */}
          <CommandBar items={commandBarItems} />
        </div>

        {/* <div
          style={{ borderBottom: "1px solid #ccc", marginTop: "10px" }}
        ></div> */}

        {selectedItem && (
          <div
            style={{
              display: "grid",
              gridTemplateColumns: "30% 70%",
              gap: "10px",
              marginTop: "30px",
            }}
          >
            <div>
              <p>
                {/* <strong>ID:</strong> */}
                ID
              </p>
              <p>
                {/* <strong>Title:</strong> */}
                Title
              </p>
              <p>
                {/* <strong>Brand:</strong> */}
                Brand
              </p>
              <p>
                <strong>Category:</strong>
              </p>
              <p>
                <strong>Rating:</strong>
              </p>
              <p>
                <strong>Stock:</strong>
              </p>
              <p>
                <strong>Price:</strong>
              </p>
              <p>
                <strong>Discount %:</strong>
              </p>
              <p>
                <strong>Description:</strong>
              </p>
            </div>
            <div>
              <p>{selectedItem.id}</p>
              <p>{selectedItem.title}</p>
              <p>{selectedItem.brand}</p>
              <p>{selectedItem.category}</p>
              <p>{selectedItem.rating}</p>
              <p>{selectedItem.stock}</p>
              <p>{selectedItem.price}</p>
              <p>{selectedItem.discountPercentage}</p>
              <p>{selectedItem.description}</p>
              <div style={{ display: "flex", marginTop: "10px" }}>
                {selectedItem.images.map((image, index) => (
                  <Image
                    key={index}
                    src={image}
                    alt={`Image ${index}`}
                    width={100}
                    height={100}
                    imageFit={ImageFit.cover}
                    style={{ marginRight: 10 }}
                  />
                ))}
              </div>
            </div>
          </div>
        )}
        <div
          style={{ borderBottom: "1px solid #ccc", marginTop: "10px" }}
        ></div>
      </Panel>
    </div>
  );
};

export default MyList;



import * as React from "react";
import {
  DetailsList,
  DetailsListLayoutMode,
  Selection,
  SelectionMode,
  IColumn,
} from "@fluentui/react/lib/DetailsList";
import { MarqueeSelection } from "@fluentui/react/lib/MarqueeSelection";
import { mergeStyleSets } from "@fluentui/react/lib/Styling";
import { Panel, PanelType } from "@fluentui/react/lib/Panel";
import { PrimaryButton, DefaultButton } from "@fluentui/react/lib/Button";
import { Image, ImageFit } from "@fluentui/react/lib/Image";
import { initializeIcons } from "@fluentui/react";
initializeIcons();
interface CustomPanelFooterProps {
  onSave: () => void;
  onCancel: () => void;
}

const CustomPanelFooter: React.FC<CustomPanelFooterProps> = ({
  onSave,
  onCancel,
}) => (
  <div style={{ display: "flex", justifyContent: "flex-end" }}>
    <DefaultButton
      onClick={onCancel}
      text="Cancel"
      style={{ marginRight: 8 }}
    />
    <PrimaryButton onClick={onSave} text="Save" />
  </div>
);

interface IProduct {
  id: number;
  title: string;
  brand: string;
  category: string;
  rating: number;
  stock: number;
  price: number;
  discountPercentage: number;
  description: string;
  thumbnail: string;
  images: string[];
}

const columns: IColumn[] = [
  { key: "id", name: "ID", fieldName: "id", minWidth: 50, maxWidth: 100 },
  {
    key: "title",
    name: "Title",
    fieldName: "title",
    minWidth: 100,
    maxWidth: 200,
    isResizable: true,
  },
  {
    key: "brand",
    name: "Brand",
    fieldName: "brand",
    minWidth: 100,
    maxWidth: 150,
  },
  {
    key: "category",
    name: "Category",
    fieldName: "category",
    minWidth: 100,
    maxWidth: 150,
  },
  {
    key: "rating",
    name: "Rating",
    fieldName: "rating",
    minWidth: 50,
    maxWidth: 100,
  },
  {
    key: "stock",
    name: "Stock",
    fieldName: "stock",
    minWidth: 50,
    maxWidth: 100,
  },
  {
    key: "price",
    name: "Price",
    fieldName: "price",
    minWidth: 80,
    maxWidth: 120,
  },
  {
    key: "discountPercentage",
    name: "Discount %",
    fieldName: "discountPercentage",
    minWidth: 50,
    maxWidth: 100,
  },
];
const classNames = mergeStyleSets({
  table: {
    margin: "auto",
  },
});

const MyList = () => {
  const [items, setItems] = React.useState<IProduct[]>([]);
  const [selectionDetails, setSelectionDetails] = React.useState("");
  const [sortedColumn, setSortedColumn] = React.useState<string | undefined>(
    undefined
  );
  const [isSortedDescending, setIsSortedDescending] =
    React.useState<boolean>(false);
  const [isPanelOpen, setIsPanelOpen] = React.useState(false);
  const [selectedItem, setSelectedItem] = React.useState<IProduct | null>(null);

  React.useEffect(() => {
    fetch("https://dummyjson.com/products")
      .then((response) => response.json())
      .then((data) => setItems(data.products))
      .catch((error) => console.error("Error fetching data:", error));
  }, []);

  const selection = new Selection({
    onSelectionChanged: () => {
      setSelectionDetails(
        selection.getSelectedCount() === 1
          ? "1 item selected: " + selection.getSelection()[0]
          : `${selection.getSelectedCount()} items selected`
      );
    },
  });

  const onColumnClick = (
    ev: React.MouseEvent<HTMLElement>,
    column: IColumn
  ): void => {
    const newIsSortedDescending = !isSortedDescending;

    setItems(
      [...items].sort((a, b) => {
        if (column.key === "id") {
          return newIsSortedDescending ? b.id - a.id : a.id - b.id;
        } else if (column.key === "title") {
          return newIsSortedDescending
            ? b.title.localeCompare(a.title)
            : a.title.localeCompare(b.title);
        } else if (column.key === "brand") {
          return newIsSortedDescending
            ? b.brand.localeCompare(a.brand)
            : a.brand.localeCompare(b.brand);
        } else if (column.key === "category") {
          return newIsSortedDescending
            ? b.category.localeCompare(a.category)
            : a.category.localeCompare(b.category);
        } else if (column.key === "rating") {
          return newIsSortedDescending
            ? b.rating - a.rating
            : a.rating - b.rating;
        } else if (column.key === "stock") {
          return newIsSortedDescending ? b.stock - a.stock : a.stock - b.stock;
        } else if (column.key === "price") {
          return newIsSortedDescending ? b.price - a.price : a.price - b.price;
        } else if (column.key === "discountPercentage") {
          return newIsSortedDescending
            ? b.discountPercentage - a.discountPercentage
            : a.discountPercentage - b.discountPercentage;
        }
        return 0;
      })
    );

    setSortedColumn(column.key);
    setIsSortedDescending(newIsSortedDescending);
  };

  const openPanel = (item: IProduct) => {
    setSelectedItem(item);
    setIsPanelOpen(true);
  };

  const closePanel = () => {
    setSelectedItem(null);
    setIsPanelOpen(false);
  };

  const savePanel = () => {
    // Handle save logic
    closePanel();
  };

  return (
    <div>
      <div>{selectionDetails}</div>
      <MarqueeSelection selection={selection}>
        <DetailsList
          items={items}
          columns={columns.map((col) => ({
            ...col,
            isSorted: col.key === sortedColumn,
            isSortedDescending: isSortedDescending,
            onColumnClick: onColumnClick,
            onRender: (item?: any, index?: number, column?: IColumn) => {
              if (column && column.key === "title") {
                return (
                  <a href="#" onClick={() => openPanel(item as IProduct)}>
                    {(item as IProduct).title}
                  </a>
                );
              } else {
                const cellValue = item[column?.fieldName as keyof IProduct];
                return <span>{cellValue}</span>;
              }
            },
          }))}
          setKey="set"
          layoutMode={DetailsListLayoutMode.justified}
          selection={selection}
          selectionMode={SelectionMode.multiple}
          isHeaderVisible={true}
          className={classNames.table}
        />
      </MarqueeSelection>
      <Panel
        isOpen={isPanelOpen}
        type={PanelType.largeFixed}
        // onRenderHeader={() => (
        //   <div
        //     style={{
        //       borderBottom: "1px solid #ccc",
        //       display: "flex",
        //       justifyContent: "space-between",
        //       alignItems: "center",
        //       padding: "10px",
        //     }}
        //   >
        //     <h2 style={{ margin: "0" }}>
        //       {selectedItem ? selectedItem.title : "Product Details"}
        //     </h2>
        //     <DefaultButton
        //       text="X"
        //       onClick={closePanel}
        //       styles={{ root: { border: "none" } }}
        //     />
        //   </div>
        // )}

        onRenderHeader={() => (
          <div
            style={{
              borderBottom: "2px solid rgb(0, 120, 212)",
              display: "flex",
              justifyContent: "space-between",
            }}
          >
            <div>
              <DefaultButton
                text={selectedItem ? selectedItem.title : "Product Details"}
                styles={{ root: { border: "none" } }}
              />
            </div>
          </div>
        )}
        // onRenderHeader={() => (
        //   <div
        //     style={{
        //       borderBottom: "1px solid #ccc",
        //       display: "flex",
        //       justifyContent: "space-between",
        //     }}
        //   >
        //     <div style={{ textAlign: "left" }}>
        //       <DefaultButton
        //         text={selectedItem ? selectedItem.title : "Product Details"}
        //         styles={{ root: { border: "none" } }}
        //       />
        //     </div>
        //   </div>
        // )}
        onDismiss={closePanel}
        closeButtonAriaLabel="Close"
        isFooterAtBottom={true}
        onRenderFooterContent={() => (
          <CustomPanelFooter onSave={savePanel} onCancel={closePanel} />
        )}
      >
        <div
          style={{ borderBottom: "1px solid #ccc", marginTop: "10px" }}
        ></div>
        {selectedItem && (
          <div
            style={{
              display: "grid",
              gridTemplateColumns: "30% 70%",
              gap: "10px",
              marginTop: "30px",
            }}
          >
            <div>
              <p>
                {/* <strong>ID:</strong> */}
                ID
              </p>
              <p>
                {/* <strong>Title:</strong> */}
                Title
              </p>
              <p>
                {/* <strong>Brand:</strong> */}
                Brand
              </p>
              <p>
                <strong>Category:</strong>
              </p>
              <p>
                <strong>Rating:</strong>
              </p>
              <p>
                <strong>Stock:</strong>
              </p>
              <p>
                <strong>Price:</strong>
              </p>
              <p>
                <strong>Discount %:</strong>
              </p>
              <p>
                <strong>Description:</strong>
              </p>
            </div>
            <div>
              <p>{selectedItem.id}</p>
              <p>{selectedItem.title}</p>
              <p>{selectedItem.brand}</p>
              <p>{selectedItem.category}</p>
              <p>{selectedItem.rating}</p>
              <p>{selectedItem.stock}</p>
              <p>{selectedItem.price}</p>
              <p>{selectedItem.discountPercentage}</p>
              <p>{selectedItem.description}</p>
              <div style={{ display: "flex", marginTop: "10px" }}>
                {selectedItem.images.map((image, index) => (
                  <Image
                    key={index}
                    src={image}
                    alt={`Image ${index}`}
                    width={100}
                    height={100}
                    imageFit={ImageFit.cover}
                    style={{ marginRight: 10 }}
                  />
                ))}
              </div>
            </div>
          </div>
        )}
        <div
          style={{ borderBottom: "1px solid #ccc", marginTop: "10px" }}
        ></div>
      </Panel>

      {/* <Panel
        isOpen={isPanelOpen}
        type={PanelType.medium}
        headerText={selectedItem ? selectedItem.title : "Product Details"}
        onDismiss={closePanel}
        closeButtonAriaLabel="Close"
        isFooterAtBottom={true}
        onRenderFooterContent={() => (
          <CustomPanelFooter onSave={savePanel} onCancel={closePanel} />
        )}
      >
        {selectedItem && (
          <div>
            <p>ID: {selectedItem.id}</p>
            <p>Title: {selectedItem.title}</p>
            <p>Brand: {selectedItem.brand}</p>
            <p>Category: {selectedItem.category}</p>
            <p>Rating: {selectedItem.rating}</p>
            <p>Stock: {selectedItem.stock}</p>
            <p>Price: {selectedItem.price}</p>
            <p>Discount %: {selectedItem.discountPercentage}</p>
            <p>Description: {selectedItem.description}</p>
            <div>
              {selectedItem.images.map((image, index) => (
                <Image
                  key={index}
                  src={image}
                  alt={`Image ${index}`}
                  width={100}
                  height={100}
                  imageFit={ImageFit.cover}
                  style={{ marginRight: 10 }}
                />
              ))}
            </div>
          </div>
        )}
      </Panel> */}
      {/* <Panel
        isOpen={isPanelOpen}
        type={PanelType.medium}
        headerText={selectedItem ? selectedItem.title : "Product Details"}
        onDismiss={closePanel}
        closeButtonAriaLabel="Close"
        isFooterAtBottom={true}
        onRenderFooterContent={() => (
          <CustomPanelFooter onSave={savePanel} onCancel={closePanel} />
        )}
      >
        {selectedItem && (
          <div style={{ display: "flex" }}>
            <div style={{ flex: "1", marginRight: "20px" }}>
              <Image
                src={selectedItem.thumbnail}
                alt={selectedItem.title}
                width={200}
                height={200}
                imageFit={ImageFit.cover}
              />
            </div>
            <div style={{ flex: "1" }}>
              <p>
                <strong>ID:</strong> {selectedItem.id}
              </p>
              <p>
                <strong>Title:</strong> {selectedItem.title}
              </p>
              <p>
                <strong>Brand:</strong> {selectedItem.brand}
              </p>
              <p>
                <strong>Category:</strong> {selectedItem.category}
              </p>
              <p>
                <strong>Rating:</strong> {selectedItem.rating}
              </p>
              <p>
                <strong>Stock:</strong> {selectedItem.stock}
              </p>
              <p>
                <strong>Price:</strong> {selectedItem.price}
              </p>
              <p>
                <strong>Discount %:</strong> {selectedItem.discountPercentage}
              </p>
              <p>
                <strong>Description:</strong> {selectedItem.description}
              </p>
              <div style={{ display: "flex", marginTop: "10px" }}>
                {selectedItem.images.map((image, index) => (
                  <Image
                    key={index}
                    src={image}
                    alt={`Image ${index}`}
                    width={100}
                    height={100}
                    imageFit={ImageFit.cover}
                    style={{ marginRight: 10 }}
                  />
                ))}
              </div>
            </div>
          </div>
        )}
      </Panel> */}
    </div>
  );
};

export default MyList;

//////////////////////////////////////////////
import * as React from "react";
import {
  CommandBar,
  ICommandBarItemProps,
  initializeIcons,
} from "@fluentui/react";

initializeIcons();

const MyComponent: React.FC = () => {
  const commandBarItems: ICommandBarItemProps[] = [
    {
      key: "view",
      text: "View",
      iconProps: { iconName: "View" },
      onClick: () => handleViewClick(),
    },
    {
      key: "edit",
      text: "Edit",
      iconProps: { iconName: "Edit" },
      onClick: () => handleEditClick(),
    },
    {
      key: "delete",
      text: "Delete",
      iconProps: { iconName: "Delete" },
      onClick: () => handleDeleteClick(),
    },
    {
      key: "cancel",
      text: "Cancel",
      iconProps: { iconName: "Cancel" },
      onClick: () => handleCancelClick(),
    },
    {
      key: "approve",
      text: "Approve",
      iconProps: { iconName: "CheckMark" },
      onClick: () => handleApproveClick(),
    },
    {
      key: "refresh",
      text: "Refresh",
      iconProps: { iconName: "Refresh" },
      onClick: () => handleRefreshClick(),
    },
  ];

  const handleViewClick = () => {
    // Handle the View action here
  };

  const handleEditClick = () => {
    // Handle the Edit action here
  };

  const handleDeleteClick = () => {
    // Handle the Delete action here
  };

  const handleCancelClick = () => {
    // Handle the Cancel action here
  };

  const handleApproveClick = () => {
    // Handle the Approve action here
  };

  const handleRefreshClick = () => {
    // Handle the Approve action here
  };

  return (
    <div>
      <CommandBar items={commandBarItems} />
      {/* Your component content here */}
    </div>
  );
};

export default MyComponent;


=========
import * as React from "react";
import {
  DetailsList,
  DetailsListLayoutMode,
  Selection,
  SelectionMode,
  IColumn,
} from "@fluentui/react/lib/DetailsList";
import { MarqueeSelection } from "@fluentui/react/lib/MarqueeSelection";
import { mergeStyleSets } from "@fluentui/react/lib/Styling";
import { Panel, PanelType } from "@fluentui/react/lib/Panel";
import { PrimaryButton, DefaultButton } from "@fluentui/react/lib/Button";

interface CustomPanelFooterProps {
  onSave: () => void;
  onCancel: () => void;
}

const CustomPanelFooter: React.FC<CustomPanelFooterProps> = ({
  onSave,
  onCancel,
}) => (
  <div style={{ display: "flex", justifyContent: "flex-end" }}>
    <DefaultButton
      onClick={onCancel}
      text="Cancel"
      style={{ marginRight: 8 }}
    />
    <PrimaryButton onClick={onSave} text="Save" />
  </div>
);

interface IProduct {
  id: number;
  title: string;
  brand: string;
  category: string;
  rating: number;
  stock: number;
  price: number;
  discountPercentage: number;
}

const columns: IColumn[] = [
  { key: "id", name: "ID", fieldName: "id", minWidth: 50, maxWidth: 100 },
  {
    key: "title",
    name: "Title",
    fieldName: "title",
    minWidth: 100,
    maxWidth: 200,
    isResizable: true,
  },
  {
    key: "brand",
    name: "Brand",
    fieldName: "brand",
    minWidth: 100,
    maxWidth: 150,
  },
  {
    key: "category",
    name: "Category",
    fieldName: "category",
    minWidth: 100,
    maxWidth: 150,
  },
  {
    key: "rating",
    name: "Rating",
    fieldName: "rating",
    minWidth: 50,
    maxWidth: 100,
  },
  {
    key: "stock",
    name: "Stock",
    fieldName: "stock",
    minWidth: 50,
    maxWidth: 100,
  },
  {
    key: "price",
    name: "Price",
    fieldName: "price",
    minWidth: 80,
    maxWidth: 120,
  },
  {
    key: "discountPercentage",
    name: "Discount %",
    fieldName: "discountPercentage",
    minWidth: 50,
    maxWidth: 100,
  },
];

const classNames = mergeStyleSets({
  table: {
    margin: "auto",
  },
});

const MyList = () => {
  const [items, setItems] = React.useState<IProduct[]>([]);
  const [selectionDetails, setSelectionDetails] = React.useState("");
  const [sortedColumn, setSortedColumn] = React.useState<string | undefined>(
    undefined
  );
  const [isSortedDescending, setIsSortedDescending] =
    React.useState<boolean>(false);
  const [isPanelOpen, setIsPanelOpen] = React.useState(false);
  const [selectedItem, setSelectedItem] = React.useState<IProduct | null>(null);

  React.useEffect(() => {
    fetch("https://dummyjson.com/products")
      .then((response) => response.json())
      .then((data) => setItems(data.products))
      .catch((error) => console.error("Error fetching data:", error));
  }, []);

  const selection = new Selection({
    onSelectionChanged: () => {
      setSelectionDetails(
        selection.getSelectedCount() === 1
          ? "1 item selected: " + selection.getSelection()[0]
          : `${selection.getSelectedCount()} items selected`
      );
    },
  });

  const onColumnClick = (
    ev: React.MouseEvent<HTMLElement>,
    column: IColumn
  ): void => {
    const newIsSortedDescending = !isSortedDescending;

    setItems(
      [...items].sort((a, b) => {
        if (column.key === "id") {
          return newIsSortedDescending ? b.id - a.id : a.id - b.id;
        } else if (column.key === "title") {
          return newIsSortedDescending
            ? b.title.localeCompare(a.title)
            : a.title.localeCompare(b.title);
        } else if (column.key === "brand") {
          return newIsSortedDescending
            ? b.brand.localeCompare(a.brand)
            : a.brand.localeCompare(b.brand);
        } else if (column.key === "category") {
          return newIsSortedDescending
            ? b.category.localeCompare(a.category)
            : a.category.localeCompare(b.category);
        } else if (column.key === "rating") {
          return newIsSortedDescending
            ? b.rating - a.rating
            : a.rating - b.rating;
        } else if (column.key === "stock") {
          return newIsSortedDescending ? b.stock - a.stock : a.stock - b.stock;
        } else if (column.key === "price") {
          return newIsSortedDescending ? b.price - a.price : a.price - b.price;
        } else if (column.key === "discountPercentage") {
          return newIsSortedDescending
            ? b.discountPercentage - a.discountPercentage
            : a.discountPercentage - b.discountPercentage;
        }
        return 0;
      })
    );

    setSortedColumn(column.key);
    setIsSortedDescending(newIsSortedDescending);
  };

  const openPanel = (item: IProduct) => {
    setSelectedItem(item);
    setIsPanelOpen(true);
  };

  const closePanel = () => {
    setSelectedItem(null);
    setIsPanelOpen(false);
  };

  const savePanel = () => {
    // Handle save logic
    closePanel();
  };

  return (
    <div>
      <div>{selectionDetails}</div>
      <MarqueeSelection selection={selection}>
        <DetailsList
          items={items}
          columns={columns.map((col) => ({
            ...col,
            isSorted: col.key === sortedColumn,
            isSortedDescending: isSortedDescending,
            onColumnClick: onColumnClick,
            onRender: (item?: any, index?: number, column?: IColumn) => {
              if (column && column.key === "title") {
                return (
                  <a href="#" onClick={() => openPanel(item as IProduct)}>
                    {(item as IProduct).title}
                  </a>
                );
              } else {
                const cellValue = item[column?.fieldName as keyof IProduct];
                return <span>{cellValue}</span>;
              }
            },
          }))}
          setKey="set"
          layoutMode={DetailsListLayoutMode.justified}
          selection={selection}
          selectionMode={SelectionMode.multiple}
          isHeaderVisible={true}
          className={classNames.table}
        />
      </MarqueeSelection>
      <Panel
        isOpen={isPanelOpen}
        type={PanelType.smallFixedFar}
        headerText={selectedItem ? selectedItem.title : "Product Details"}
        onDismiss={closePanel}
        closeButtonAriaLabel="Close"
        isFooterAtBottom={true}
        onRenderFooterContent={() => (
          <CustomPanelFooter onSave={savePanel} onCancel={closePanel} />
        )}
        // footerButtons={
        //   <div style={{ display: "flex", justifyContent: "flex-end" }}>
        //     <DefaultButton
        //       onClick={closePanel}
        //       text="Cancel"
        //       style={{ marginRight: 8 }}
        //     />
        //     <PrimaryButton onClick={closePanel} text="Save" />
        //   </div>
        // }
      >
        {selectedItem && (
          <div>
            <p>ID: {selectedItem.id}</p>
            <p>Title: {selectedItem.title}</p>
            <p>Brand: {selectedItem.brand}</p>
            <p>Category: {selectedItem.category}</p>
            <p>Rating: {selectedItem.rating}</p>
            <p>Stock: {selectedItem.stock}</p>
            <p>Price: {selectedItem.price}</p>
            <p>Discount %: {selectedItem.discountPercentage}</p>
          </div>
        )}
      </Panel>
    </div>
  );
};

export default MyList;


==========================
import * as React from "react";
import {
  DetailsList,
  DetailsListLayoutMode,
  Selection,
  SelectionMode,
  IColumn,
} from "@fluentui/react/lib/DetailsList";
import { MarqueeSelection } from "@fluentui/react/lib/MarqueeSelection";
import { mergeStyleSets } from "@fluentui/react/lib/Styling";
import { Panel, PanelType } from "@fluentui/react/lib/Panel";
import { PrimaryButton, DefaultButton } from "@fluentui/react/lib/Button";

interface IProduct {
  id: number;
  title: string;
  brand: string;
  category: string;
  rating: number;
  stock: number;
  price: number;
  discountPercentage: number;
}

const columns: IColumn[] = [
  { key: "id", name: "ID", fieldName: "id", minWidth: 50, maxWidth: 100 },
  {
    key: "title",
    name: "Title",
    fieldName: "title",
    minWidth: 100,
    maxWidth: 200,
    isResizable: true,
  },
  {
    key: "brand",
    name: "Brand",
    fieldName: "brand",
    minWidth: 100,
    maxWidth: 150,
  },
  {
    key: "category",
    name: "Category",
    fieldName: "category",
    minWidth: 100,
    maxWidth: 150,
  },
  {
    key: "rating",
    name: "Rating",
    fieldName: "rating",
    minWidth: 50,
    maxWidth: 100,
  },
  {
    key: "stock",
    name: "Stock",
    fieldName: "stock",
    minWidth: 50,
    maxWidth: 100,
  },
  {
    key: "price",
    name: "Price",
    fieldName: "price",
    minWidth: 80,
    maxWidth: 120,
  },
  {
    key: "discountPercentage",
    name: "Discount %",
    fieldName: "discountPercentage",
    minWidth: 50,
    maxWidth: 100,
  },
];

const classNames = mergeStyleSets({
  table: {
    margin: "auto",
  },
});

const MyList = () => {
  const [items, setItems] = React.useState<IProduct[]>([]);
  const [selectionDetails, setSelectionDetails] = React.useState("");
  const [sortedColumn, setSortedColumn] = React.useState<string | undefined>(
    undefined
  );
  const [isSortedDescending, setIsSortedDescending] =
    React.useState<boolean>(false);
  const [isPanelOpen, setIsPanelOpen] = React.useState(false);
  const [selectedItem, setSelectedItem] = React.useState<IProduct | null>(null);

  React.useEffect(() => {
    fetch("https://dummyjson.com/products")
      .then((response) => response.json())
      .then((data) => setItems(data.products))
      .catch((error) => console.error("Error fetching data:", error));
  }, []);

  const selection = new Selection({
    onSelectionChanged: () => {
      setSelectionDetails(
        selection.getSelectedCount() === 1
          ? "1 item selected: " + selection.getSelection()[0]
          : `${selection.getSelectedCount()} items selected`
      );
    },
  });

  const onColumnClick = (
    ev: React.MouseEvent<HTMLElement>,
    column: IColumn
  ): void => {
    const newIsSortedDescending = !isSortedDescending;

    setItems(
      [...items].sort((a, b) => {
        if (column.key === "id") {
          return newIsSortedDescending ? b.id - a.id : a.id - b.id;
        } else if (column.key === "title") {
          return newIsSortedDescending
            ? b.title.localeCompare(a.title)
            : a.title.localeCompare(b.title);
        } else if (column.key === "brand") {
          return newIsSortedDescending
            ? b.brand.localeCompare(a.brand)
            : a.brand.localeCompare(b.brand);
        } else if (column.key === "category") {
          return newIsSortedDescending
            ? b.category.localeCompare(a.category)
            : a.category.localeCompare(b.category);
        } else if (column.key === "rating") {
          return newIsSortedDescending
            ? b.rating - a.rating
            : a.rating - b.rating;
        } else if (column.key === "stock") {
          return newIsSortedDescending ? b.stock - a.stock : a.stock - b.stock;
        } else if (column.key === "price") {
          return newIsSortedDescending ? b.price - a.price : a.price - b.price;
        } else if (column.key === "discountPercentage") {
          return newIsSortedDescending
            ? b.discountPercentage - a.discountPercentage
            : a.discountPercentage - b.discountPercentage;
        }
        return 0;
      })
    );

    setSortedColumn(column.key);
    setIsSortedDescending(newIsSortedDescending);
  };

  const openPanel = (item: IProduct) => {
    setSelectedItem(item);
    setIsPanelOpen(true);
  };

  const closePanel = () => {
    setSelectedItem(null);
    setIsPanelOpen(false);
  };

  return (
    <div>
      <div>{selectionDetails}</div>
      <MarqueeSelection selection={selection}>
        <DetailsList
          items={items}
          columns={columns.map((col) => ({
            ...col,
            isSorted: col.key === sortedColumn,
            isSortedDescending: isSortedDescending,
            onColumnClick: onColumnClick,
            onRender: (item?: any, index?: number, column?: IColumn) => {
              if (column && column.key === "title") {
                return (
                  <a href="#" onClick={() => openPanel(item as IProduct)}>
                    {(item as IProduct).title}
                  </a>
                );
              } else {
                return <span>{(item as IProduct).title}</span>;
              }
            },
          }))}
          setKey="set"
          layoutMode={DetailsListLayoutMode.justified}
          selection={selection}
          selectionMode={SelectionMode.multiple}
          isHeaderVisible={true}
          className={classNames.table}
        />
      </MarqueeSelection>
      <Panel
        isOpen={isPanelOpen}
        type={PanelType.smallFixedFar}
        headerText={selectedItem ? selectedItem.title : "Product Details"}
        onDismiss={closePanel}
        closeButtonAriaLabel="Close"
        isFooterAtBottom={true}
        // footerButtons={
        //   <div style={{ display: "flex", justifyContent: "flex-end" }}>
        //     <DefaultButton
        //       onClick={closePanel}
        //       text="Cancel"
        //       style={{ marginRight: 8 }}
        //     />
        //     <PrimaryButton onClick={closePanel} text="Save" />
        //   </div>
        // }
      >
        {selectedItem && (
          <div>
            <p>ID: {selectedItem.id}</p>
            <p>Title: {selectedItem.title}</p>
            <p>Brand: {selectedItem.brand}</p>
            <p>Category: {selectedItem.category}</p>
            <p>Rating: {selectedItem.rating}</p>
            <p>Stock: {selectedItem.stock}</p>
            <p>Price: {selectedItem.price}</p>
            <p>Discount %: {selectedItem.discountPercentage}</p>
          </div>
        )}
      </Panel>
    </div>
  );
};

export default MyList;

================================================

import * as React from "react";
import { TextField } from "@fluentui/react/lib/TextField";
import { Toggle } from "@fluentui/react/lib/Toggle";
import { Announced } from "@fluentui/react/lib/Announced";
import {
  DetailsList,
  DetailsListLayoutMode,
  Selection,
  SelectionMode,
  IColumn,
} from "@fluentui/react/lib/DetailsList";
import { MarqueeSelection } from "@fluentui/react/lib/MarqueeSelection";
import { mergeStyleSets } from "@fluentui/react/lib/Styling";
import { TooltipHost } from "@fluentui/react";

interface IProduct {
  id: number;
  title: string;
  brand: string;
  category: string;
  rating: number;
  stock: number;
  price: number;
  discountPercentage: number;
}

const columns: IColumn[] = [
  { key: "id", name: "ID", fieldName: "id", minWidth: 50, maxWidth: 100 },
  {
    key: "title",
    name: "Title",
    fieldName: "title",
    minWidth: 100,
    maxWidth: 200,
  },
  {
    key: "brand",
    name: "Brand",
    fieldName: "brand",
    minWidth: 100,
    maxWidth: 150,
  },
  {
    key: "category",
    name: "Category",
    fieldName: "category",
    minWidth: 100,
    maxWidth: 150,
  },
  {
    key: "rating",
    name: "Rating",
    fieldName: "rating",
    minWidth: 50,
    maxWidth: 100,
  },
  {
    key: "stock",
    name: "Stock",
    fieldName: "stock",
    minWidth: 50,
    maxWidth: 100,
  },
  {
    key: "price",
    name: "Price",
    fieldName: "price",
    minWidth: 80,
    maxWidth: 120,
  },
  {
    key: "discountPercentage",
    name: "Discount %",
    fieldName: "discountPercentage",
    minWidth: 50,
    maxWidth: 100,
  },
];

const classNames = mergeStyleSets({
  table: {
    margin: "auto",
  },
});

const MyList = () => {
  const [items, setItems] = React.useState<IProduct[]>([]);
  const [selectionDetails, setSelectionDetails] = React.useState("");
  const [sortedColumn, setSortedColumn] = React.useState<string | undefined>(
    undefined
  );
  const [isSortedDescending, setIsSortedDescending] =
    React.useState<boolean>(false);

  React.useEffect(() => {
    fetch("https://dummyjson.com/products")
      .then((response) => response.json())
      .then((data) => setItems(data.products))
      .catch((error) => console.error("Error fetching data:", error));
  }, []);

  const selection = new Selection({
    onSelectionChanged: () => {
      setSelectionDetails(
        selection.getSelectedCount() === 1
          ? "1 item selected: " + selection.getSelection()[0]
          : `${selection.getSelectedCount()} items selected`
      );
    },
  });

  const onColumnClick = (
    ev: React.MouseEvent<HTMLElement>,
    column: IColumn
  ): void => {
    const newIsSortedDescending = !isSortedDescending;

    setItems(
      [...items].sort((a, b) => {
        if (column.key === "id") {
          return newIsSortedDescending ? b.id - a.id : a.id - b.id;
        } else if (column.key === "title") {
          return newIsSortedDescending
            ? b.title.localeCompare(a.title)
            : a.title.localeCompare(b.title);
        } else if (column.key === "brand") {
          return newIsSortedDescending
            ? b.brand.localeCompare(a.brand)
            : a.brand.localeCompare(b.brand);
        } else if (column.key === "category") {
          return newIsSortedDescending
            ? b.category.localeCompare(a.category)
            : a.category.localeCompare(b.category);
        } else if (column.key === "rating") {
          return newIsSortedDescending
            ? b.rating - a.rating
            : a.rating - b.rating;
        } else if (column.key === "stock") {
          return newIsSortedDescending ? b.stock - a.stock : a.stock - b.stock;
        } else if (column.key === "price") {
          return newIsSortedDescending ? b.price - a.price : a.price - b.price;
        } else if (column.key === "discountPercentage") {
          return newIsSortedDescending
            ? b.discountPercentage - a.discountPercentage
            : a.discountPercentage - b.discountPercentage;
        }
        return 0;
      })
    );

    setSortedColumn(column.key);
    setIsSortedDescending(newIsSortedDescending);
  };

  return (
    <div>
      <div>{selectionDetails}</div>
      <MarqueeSelection selection={selection}>
        <DetailsList
          items={items}
          columns={columns.map((col) => ({
            ...col,
            isSorted: col.key === sortedColumn,
            isSortedDescending: isSortedDescending,
            onColumnClick: onColumnClick,
          }))}
          setKey="set"
          layoutMode={DetailsListLayoutMode.justified}
          selection={selection}
          selectionMode={SelectionMode.multiple}
          isHeaderVisible={true}
          className={classNames.table}
        />
      </MarqueeSelection>
    </div>
  );
};

export default MyList;


===============
import * as React from "react";
import { TextField } from "@fluentui/react/lib/TextField";
import { Toggle } from "@fluentui/react/lib/Toggle";
import { Announced } from "@fluentui/react/lib/Announced";
import {
  DetailsList,
  DetailsListLayoutMode,
  Selection,
  SelectionMode,
  IColumn,
} from "@fluentui/react/lib/DetailsList";
import { MarqueeSelection } from "@fluentui/react/lib/MarqueeSelection";
import { mergeStyleSets } from "@fluentui/react/lib/Styling";
import { TooltipHost } from "@fluentui/react";
import {
  ContextualMenu,
  IContextualMenuProps,
} from "@fluentui/react/lib/ContextualMenu";
import { Icon } from "@fluentui/react/lib/Icon";

interface IProduct {
  id: number;
  title: string;
  brand: string;
  category: string;
  rating: number;
  stock: number;
  price: number;
  discountPercentage: number;
}

const columns: IColumn[] = [
  {
    key: "id",
    name: "ID",
    fieldName: "id",
    minWidth: 50,
    maxWidth: 100,
    isSorted: false,
    isSortedDescending: false,
  },
  {
    key: "title",
    name: "Title",
    fieldName: "title",
    minWidth: 100,
    maxWidth: 200,
    isSorted: false,
    isSortedDescending: false,
  },
  {
    key: "brand",
    name: "Brand",
    fieldName: "brand",
    minWidth: 100,
    maxWidth: 150,
    isSorted: false,
    isSortedDescending: false,
  },
  {
    key: "category",
    name: "Category",
    fieldName: "category",
    minWidth: 100,
    maxWidth: 150,
    isSorted: false,
    isSortedDescending: false,
  },
  {
    key: "rating",
    name: "Rating",
    fieldName: "rating",
    minWidth: 50,
    maxWidth: 100,
    isSorted: false,
    isSortedDescending: false,
  },
  {
    key: "stock",
    name: "Stock",
    fieldName: "stock",
    minWidth: 50,
    maxWidth: 100,
    isSorted: false,
    isSortedDescending: false,
  },
  {
    key: "price",
    name: "Price",
    fieldName: "price",
    minWidth: 80,
    maxWidth: 120,
    isSorted: false,
    isSortedDescending: false,
  },
  {
    key: "discountPercentage",
    name: "Discount %",
    fieldName: "discountPercentage",
    minWidth: 50,
    maxWidth: 100,
    isSorted: false,
    isSortedDescending: false,
  },
];

const sortOptions: IContextualMenuProps["items"] = [
  {
    key: "olderToNewer",
    text: "Older to Newer",
    onClick: () => handleSort("id", true),
  },
  {
    key: "newerToOlder",
    text: "Newer to Older",
    onClick: () => handleSort("id", false),
  },
];

const classNames = mergeStyleSets({
  table: {
    margin: "auto",
  },
  headerIcon: {
    fontSize: 16,
    verticalAlign: "middle",
  },
});

const MyList = () => {
  const [items, setItems] = React.useState<IProduct[]>([]);
  const [selectionDetails, setSelectionDetails] = React.useState("");
  const [sortedColumn, setSortedColumn] = React.useState<string | undefined>(
    undefined
  );
  const [isSortedDescending, setIsSortedDescending] =
    React.useState<boolean>(false);
  const [isContextMenuVisible, setIsContextMenuVisible] =
    React.useState<boolean>(false);
  const [contextMenuTarget, setContextMenuTarget] =
    React.useState<null | HTMLElement>(null);

  React.useEffect(() => {
    fetch("https://dummyjson.com/products")
      .then((response) => response.json())
      .then((data) => setItems(data.products))
      .catch((error) => console.error("Error fetching data:", error));
  }, []);

  const selection = new Selection({
    onSelectionChanged: () => {
      setSelectionDetails(
        selection.getSelectedCount() === 1
          ? "1 item selected: " + selection.getSelection()[0]
          : `${selection.getSelectedCount()} items selected`
      );
    },
  });

  const handleSort = (columnKey: string, isDescending: boolean) => {
    setItems(
      [...items].sort((a, b) => {
        if (columnKey === "id") {
          return isDescending ? b.id - a.id : a.id - b.id;
        }
        return 0;
      })
    );

    setSortedColumn(columnKey);
    setIsSortedDescending(isDescending);
  };

  const onColumnClick = (
    ev: React.MouseEvent<HTMLElement>,
    column: IColumn
  ): void => {
    setContextMenuTarget(ev.currentTarget);
    setIsContextMenuVisible(true);
  };

  const onDismissContextMenu = () => {
    setIsContextMenuVisible(false);
    setContextMenuTarget(null);
  };

  return (
    <div>
      <div>{selectionDetails}</div>
      <MarqueeSelection selection={selection}>
        <DetailsList
          items={items}
          columns={columns.map((col) => ({
            ...col,
            isSorted: col.key === sortedColumn,
            isSortedDescending: isSortedDescending,
            onColumnClick: onColumnClick,
            onRenderColumnHeader: (columnProps: any, defaultRender: any) => {
              return (
                <div>
                  <span>{columnProps.name}</span>
                  {col.isSorted && (
                    <Icon
                      className={classNames.headerIcon}
                      iconName={
                        isSortedDescending ? "ChevronDown" : "ChevronUp"
                      }
                    />
                  )}
                </div>
              );
            },
          }))}
          setKey="set"
          layoutMode={DetailsListLayoutMode.justified}
          selection={selection}
          selectionMode={SelectionMode.multiple}
          isHeaderVisible={true}
          className={classNames.table}
        />
      </MarqueeSelection>
      {isContextMenuVisible && contextMenuTarget && (
        <ContextualMenu
          items={sortOptions}
          target={contextMenuTarget}
          onDismiss={onDismissContextMenu}
        />
      )}
    </div>
  );
};

export default MyList;
function handleSort(arg0: string, arg1: boolean): boolean | void {
  throw new Error("Function not implemented.");
}

===================================


import * as React from "react";
import { TextField } from "@fluentui/react/lib/TextField";
import { Toggle } from "@fluentui/react/lib/Toggle";
import { Announced } from "@fluentui/react/lib/Announced";
import {
  DetailsList,
  DetailsListLayoutMode,
  Selection,
  SelectionMode,
  IColumn,
} from "@fluentui/react/lib/DetailsList";
import { MarqueeSelection } from "@fluentui/react/lib/MarqueeSelection";
import { mergeStyleSets } from "@fluentui/react/lib/Styling";
import { TooltipHost } from "@fluentui/react";
import {
  ContextualMenu,
  IContextualMenuProps,
} from "@fluentui/react/lib/ContextualMenu";
import { Icon } from "@fluentui/react/lib/Icon";

interface IProduct {
  id: number;
  title: string;
  brand: string;
  category: string;
  rating: number;
  stock: number;
  price: number;
  discountPercentage: number;
}

const columns: IColumn[] = [
  {
    key: "id",
    name: "ID",
    fieldName: "id",
    minWidth: 50,
    maxWidth: 100,
    isSorted: false,
    isSortedDescending: false,
  },
  {
    key: "title",
    name: "Title",
    fieldName: "title",
    minWidth: 100,
    maxWidth: 200,
    isSorted: false,
    isSortedDescending: false,
  },
  {
    key: "brand",
    name: "Brand",
    fieldName: "brand",
    minWidth: 100,
    maxWidth: 150,
    isSorted: false,
    isSortedDescending: false,
  },
  {
    key: "category",
    name: "Category",
    fieldName: "category",
    minWidth: 100,
    maxWidth: 150,
    isSorted: false,
    isSortedDescending: false,
  },
  {
    key: "rating",
    name: "Rating",
    fieldName: "rating",
    minWidth: 50,
    maxWidth: 100,
    isSorted: false,
    isSortedDescending: false,
  },
  {
    key: "stock",
    name: "Stock",
    fieldName: "stock",
    minWidth: 50,
    maxWidth: 100,
    isSorted: false,
    isSortedDescending: false,
  },
  {
    key: "price",
    name: "Price",
    fieldName: "price",
    minWidth: 80,
    maxWidth: 120,
    isSorted: false,
    isSortedDescending: false,
  },
  {
    key: "discountPercentage",
    name: "Discount %",
    fieldName: "discountPercentage",
    minWidth: 50,
    maxWidth: 100,
    isSorted: false,
    isSortedDescending: false,
  },
];

const sortOptions: IContextualMenuProps["items"] = [
  {
    key: "olderToNewer",
    text: "Older to Newer",
    onClick: () => handleSort("id", true),
  },
  {
    key: "newerToOlder",
    text: "Newer to Older",
    onClick: () => handleSort("id", false),
  },
];

const classNames = mergeStyleSets({
  table: {
    margin: "auto",
  },
  headerIcon: {
    fontSize: 16,
    verticalAlign: "middle",
  },
});

const MyList = () => {
  const [items, setItems] = React.useState<IProduct[]>([]);
  const [selectionDetails, setSelectionDetails] = React.useState("");
  const [sortedColumn, setSortedColumn] = React.useState<string | undefined>(
    undefined
  );
  const [isSortedDescending, setIsSortedDescending] =
    React.useState<boolean>(false);
  const [isContextMenuVisible, setIsContextMenuVisible] =
    React.useState<boolean>(false);
  const [contextMenuTarget, setContextMenuTarget] =
    React.useState<null | HTMLElement>(null);

  React.useEffect(() => {
    fetch("https://dummyjson.com/products")
      .then((response) => response.json())
      .then((data) => setItems(data.products))
      .catch((error) => console.error("Error fetching data:", error));
  }, []);

  const selection = new Selection({
    onSelectionChanged: () => {
      setSelectionDetails(
        selection.getSelectedCount() === 1
          ? "1 item selected: " + selection.getSelection()[0]
          : `${selection.getSelectedCount()} items selected`
      );
    },
  });

  const handleSort = (columnKey: string, isDescending: boolean) => {
    setItems(
      [...items].sort((a, b) => {
        if (columnKey === "id") {
          return isDescending ? b.id - a.id : a.id - b.id;
        }
        return 0;
      })
    );

    setSortedColumn(columnKey);
    setIsSortedDescending(isDescending);
  };

  const onColumnClick = (
    ev: React.MouseEvent<HTMLElement>,
    column: IColumn
  ): void => {
    setContextMenuTarget(ev.currentTarget);
    setIsContextMenuVisible(true);
  };

  const onDismissContextMenu = () => {
    setIsContextMenuVisible(false);
    setContextMenuTarget(null);
  };

  return (
    <div>
      <div>{selectionDetails}</div>
      <MarqueeSelection selection={selection}>
        <DetailsList
          items={items}
          columns={columns.map((col) => ({
            ...col,
            isSorted: col.key === sortedColumn,
            isSortedDescending: isSortedDescending,
            onColumnClick: onColumnClick,
            onRenderColumnHeader: (columnProps: any, defaultRender: any) => {
              return (
                <div>
                  <span>{columnProps.name}</span>
                  {col.isSorted && (
                    <Icon
                      className={classNames.headerIcon}
                      iconName={
                        isSortedDescending ? "ChevronDown" : "ChevronUp"
                      }
                    />
                  )}
                </div>
              );
            },
          }))}
          setKey="set"
          layoutMode={DetailsListLayoutMode.justified}
          selection={selection}
          selectionMode={SelectionMode.multiple}
          isHeaderVisible={true}
          className={classNames.table}
        />
      </MarqueeSelection>
      {isContextMenuVisible && contextMenuTarget && (
        <ContextualMenu
          items={sortOptions}
          target={contextMenuTarget}
          onDismiss={onDismissContextMenu}
        />
      )}
    </div>
  );
};

export default MyList;
function handleSort(arg0: string, arg1: boolean): boolean | void {
  throw new Error("Function not implemented.");
}


===================================

import * as React from "react";
import { TextField } from "@fluentui/react/lib/TextField";
import { Toggle } from "@fluentui/react/lib/Toggle";
import { Announced } from "@fluentui/react/lib/Announced";
import {
  DetailsList,
  DetailsListLayoutMode,
  Selection,
  SelectionMode,
  IColumn,
} from "@fluentui/react/lib/DetailsList";
import { MarqueeSelection } from "@fluentui/react/lib/MarqueeSelection";
import { mergeStyleSets } from "@fluentui/react/lib/Styling";
import { TooltipHost } from "@fluentui/react";

interface IProduct {
  id: number;
  title: string;
  brand: string;
  category: string;
  rating: number;
  stock: number;
  price: number;
  discountPercentage: number;
}

const columns: IColumn[] = [
  { key: "id", name: "ID", fieldName: "id", minWidth: 50, maxWidth: 100 },
  {
    key: "title",
    name: "Title",
    fieldName: "title",
    minWidth: 100,
    maxWidth: 200,
  },
  {
    key: "brand",
    name: "Brand",
    fieldName: "brand",
    minWidth: 100,
    maxWidth: 150,
  },
  {
    key: "category",
    name: "Category",
    fieldName: "category",
    minWidth: 100,
    maxWidth: 150,
  },
  {
    key: "rating",
    name: "Rating",
    fieldName: "rating",
    minWidth: 50,
    maxWidth: 100,
  },
  {
    key: "stock",
    name: "Stock",
    fieldName: "stock",
    minWidth: 50,
    maxWidth: 100,
  },
  {
    key: "price",
    name: "Price",
    fieldName: "price",
    minWidth: 80,
    maxWidth: 120,
  },
  {
    key: "discountPercentage",
    name: "Discount %",
    fieldName: "discountPercentage",
    minWidth: 50,
    maxWidth: 100,
  },
];

const classNames = mergeStyleSets({
  table: {
    margin: "auto",
  },
});

const MyList = () => {
  const [items, setItems] = React.useState<IProduct[]>([]);
  const [selectionDetails, setSelectionDetails] = React.useState("");
  const [sortedColumn, setSortedColumn] = React.useState<string | undefined>(
    undefined
  );
  const [isSortedDescending, setIsSortedDescending] =
    React.useState<boolean>(false);

  React.useEffect(() => {
    fetch("https://dummyjson.com/products")
      .then((response) => response.json())
      .then((data) => setItems(data.products))
      .catch((error) => console.error("Error fetching data:", error));
  }, []);

  const selection = new Selection({
    onSelectionChanged: () => {
      setSelectionDetails(
        selection.getSelectedCount() === 1
          ? "1 item selected: " + selection.getSelection()[0]
          : `${selection.getSelectedCount()} items selected`
      );
    },
  });

  const onColumnClick = (
    ev: React.MouseEvent<HTMLElement>,
    column: IColumn
  ): void => {
    const newIsSortedDescending = !isSortedDescending;

    setItems(
      [...items].sort((a, b) => {
        if (column.key === "id") {
          return newIsSortedDescending ? b.id - a.id : a.id - b.id;
        } else if (column.key === "title") {
          return newIsSortedDescending
            ? b.title.localeCompare(a.title)
            : a.title.localeCompare(b.title);
        } else if (column.key === "brand") {
          return newIsSortedDescending
            ? b.brand.localeCompare(a.brand)
            : a.brand.localeCompare(b.brand);
        } else if (column.key === "category") {
          return newIsSortedDescending
            ? b.category.localeCompare(a.category)
            : a.category.localeCompare(b.category);
        } else if (column.key === "rating") {
          return newIsSortedDescending
            ? b.rating - a.rating
            : a.rating - b.rating;
        } else if (column.key === "stock") {
          return newIsSortedDescending ? b.stock - a.stock : a.stock - b.stock;
        } else if (column.key === "price") {
          return newIsSortedDescending ? b.price - a.price : a.price - b.price;
        } else if (column.key === "discountPercentage") {
          return newIsSortedDescending
            ? b.discountPercentage - a.discountPercentage
            : a.discountPercentage - b.discountPercentage;
        }
        return 0;
      })
    );

    setSortedColumn(column.key);
    setIsSortedDescending(newIsSortedDescending);
  };

  return (
    <div>
      <div>{selectionDetails}</div>
      <MarqueeSelection selection={selection}>
        <DetailsList
          items={items}
          columns={columns.map((col) => ({
            ...col,
            isSorted: col.key === sortedColumn,
            isSortedDescending: isSortedDescending,
            onColumnClick: onColumnClick,
          }))}
          setKey="set"
          layoutMode={DetailsListLayoutMode.justified}
          selection={selection}
          selectionMode={SelectionMode.multiple}
          isHeaderVisible={true}
          className={classNames.table}
        />
      </MarqueeSelection>
    </div>
  );
};

export default MyList;
===================================

import * as React from "react";
import {
  TextField,
  Toggle,
  Announced,
  DetailsList,
  DetailsListLayoutMode,
  Selection,
  SelectionMode,
  IColumn,
  MarqueeSelection,
  mergeStyleSets,
  ContextualMenu,
  IContextualMenuItem,
  DirectionalHint,
  initializeIcons,
} from "@fluentui/react";
import { TooltipHost } from "@fluentui/react";

interface IProduct {
  id: number;
  title: string;
  brand: string;
  category: string;
  rating: number;
  stock: number;
  price: number;
  discountPercentage: number;
}

const columns: IColumn[] = [
  {
    key: "id",
    name: "ID",
    fieldName: "id",
    minWidth: 50,
    maxWidth: 100,
    data: { iconName: "ChevronDown" },
  },
  {
    key: "title",
    name: "Title",
    fieldName: "title",
    minWidth: 100,
    maxWidth: 200,
    data: { iconName: "ChevronDown" },
  },
  // ... other columns ...
];

const classNames = mergeStyleSets({
  table: {
    margin: "auto",
  },
});

initializeIcons();
const MyList: React.FC = () => {
  const [items, setItems] = React.useState<IProduct[]>([]);
  const [selectionDetails, setSelectionDetails] = React.useState<string>("");
  const [sortedColumn, setSortedColumn] = React.useState<string | undefined>(
    undefined
  );
  const [isSortedDescending, setIsSortedDescending] =
    React.useState<boolean>(false);
  const [menuTarget, setMenuTarget] = React.useState<HTMLElement | null>(null);

  React.useEffect(() => {
    fetch("https://dummyjson.com/products")
      .then((response) => response.json())
      .then((data) => setItems(data.products))
      .catch((error) => console.error("Error fetching data:", error));
  }, []);

  const selection = new Selection({
    onSelectionChanged: () => {
      const selectedCount = selection.getSelectedCount();
      setSelectionDetails(
        selectedCount === 1
          ? `1 item selected: ${selection.getSelection()[0]}`
          : `${selectedCount} items selected`
      );
    },
  });

  const onColumnHeaderClick = (
    ev: React.MouseEvent<HTMLElement>,
    column: IColumn
  ): void => {
    setMenuTarget(ev.currentTarget);
  };

  const onDismiss = () => {
    setMenuTarget(null);
  };

  const getMenuItems = (): IContextualMenuItem[] => {
    return [
      {
        key: "sort",
        text: "Sort",
        onClick: () => {
          const fakeEvent = {
            currentTarget: menuTarget,
          } as React.MouseEvent<HTMLElement>;
          onColumnHeaderClick(
            fakeEvent,
            columns.find((col) => col.key === sortedColumn) as IColumn
          );
          setMenuTarget(null);
        },
      },
      {
        key: "resize",
        text: "Resize",
        onClick: () => {
          // Implement resizing logic here
          setMenuTarget(null);
        },
      },
      {
        key: "filter",
        text: "FilterBy",
        onClick: () => {
          // Implement filtering logic here
          setMenuTarget(null);
        },
      },
    ];
  };

  const onColumnClick = (
    ev: React.MouseEvent<HTMLElement>,
    column: IColumn
  ): void => {
    const newIsSortedDescending =
      column.key === sortedColumn ? !isSortedDescending : false;

    setItems(
      [...items].sort((a, b) => {
        if (column.key === "id") {
          return newIsSortedDescending ? b.id - a.id : a.id - b.id;
        } else if (column.key === "title") {
          return newIsSortedDescending
            ? b.title.localeCompare(a.title)
            : a.title.localeCompare(b.title);
        }
        // ... other column comparisons ...
        return 0;
      })
    );

    setSortedColumn(column.key);
    setIsSortedDescending(newIsSortedDescending);
  };

  return (
    <div>
      <div>{selectionDetails}</div>
      <MarqueeSelection selection={selection}>
        <DetailsList
          items={items}
          columns={columns.map((col) => ({
            ...col,
            isSorted: col.key === sortedColumn,
            isSortedDescending: isSortedDescending,
            onColumnClick: onColumnHeaderClick,
          }))}
          setKey="set"
          layoutMode={DetailsListLayoutMode.justified}
          selection={selection}
          selectionMode={SelectionMode.multiple}
          isHeaderVisible={true}
          className={classNames.table}
        />
      </MarqueeSelection>
      {menuTarget && (
        <ContextualMenu
          items={getMenuItems()}
          target={menuTarget}
          onDismiss={onDismiss}
          directionalHint={DirectionalHint.bottomLeftEdge}
        />
      )}
    </div>
  );
};

export default MyList;
===================================

import * as React from "react";
import { TextField } from "@fluentui/react/lib/TextField";
import { Toggle } from "@fluentui/react/lib/Toggle";
import { Announced } from "@fluentui/react/lib/Announced";
import {
  DetailsList,
  DetailsListLayoutMode,
  Selection,
  SelectionMode,
  IColumn,
} from "@fluentui/react/lib/DetailsList";
import { MarqueeSelection } from "@fluentui/react/lib/MarqueeSelection";
import { mergeStyleSets } from "@fluentui/react/lib/Styling";
import { TooltipHost } from "@fluentui/react";

interface IProduct {
  id: number;
  title: string;
  brand: string;
  category: string;
  rating: number;
  stock: number;
  price: number;
  discountPercentage: number;
}

const columns: IColumn[] = [
  {
    key: "id",
    name: "ID",
    fieldName: "id",
    minWidth: 50,
    maxWidth: 100,
    iconName: "ChevronDown",
  },
  {
    key: "title",
    name: "Title",
    fieldName: "title",
    minWidth: 100,
    maxWidth: 200,
    iconName: "ChevronDown",
  },
  {
    key: "brand",
    name: "Brand",
    fieldName: "brand",
    minWidth: 100,
    maxWidth: 150,
    iconName: "ChevronDown",
  },
  {
    key: "category",
    name: "Category",
    fieldName: "category",
    minWidth: 100,
    maxWidth: 150,
    iconName: "ChevronDown",
  },
  {
    key: "rating",
    name: "Rating",
    fieldName: "rating",
    minWidth: 50,
    maxWidth: 100,
    iconName: "ChevronDown",
  },
  {
    key: "stock",
    name: "Stock",
    fieldName: "stock",
    minWidth: 50,
    maxWidth: 100,
    iconName: "ChevronDown",
  },
  {
    key: "price",
    name: "Price",
    fieldName: "price",
    minWidth: 80,
    maxWidth: 120,
    iconName: "ChevronDown",
  },
  {
    key: "discountPercentage",
    name: "Discount %",
    fieldName: "discountPercentage",
    minWidth: 50,
    maxWidth: 100,
    iconName: "ChevronDown",
  },
];

const classNames = mergeStyleSets({
  table: {
    margin: "auto",
  },
});

const MyList = () => {
  const [items, setItems] = React.useState<IProduct[]>([]);
  const [selectionDetails, setSelectionDetails] = React.useState("");
  const [sortedColumn, setSortedColumn] = React.useState<string | undefined>(
    undefined
  );
  const [isSortedDescending, setIsSortedDescending] =
    React.useState<boolean>(false);

  React.useEffect(() => {
    fetch("https://dummyjson.com/products")
      .then((response) => response.json())
      .then((data) => setItems(data.products))
      .catch((error) => console.error("Error fetching data:", error));
  }, []);

  const selection = new Selection({
    onSelectionChanged: () => {
      setSelectionDetails(
        selection.getSelectedCount() === 1
          ? "1 item selected: " + selection.getSelection()[0]
          : `${selection.getSelectedCount()} items selected`
      );
    },
  });

  const onColumnClick = (
    ev: React.MouseEvent<HTMLElement>,
    column: IColumn
  ): void => {
    const newIsSortedDescending = !isSortedDescending;

    setItems(
      [...items].sort((a, b) => {
        if (column.key === "id") {
          return newIsSortedDescending ? b.id - a.id : a.id - b.id;
        } else if (column.key === "title") {
          return newIsSortedDescending
            ? b.title.localeCompare(a.title)
            : a.title.localeCompare(b.title);
        } else if (column.key === "brand") {
          return newIsSortedDescending
            ? b.brand.localeCompare(a.brand)
            : a.brand.localeCompare(b.brand);
        } else if (column.key === "category") {
          return newIsSortedDescending
            ? b.category.localeCompare(a.category)
            : a.category.localeCompare(b.category);
        } else if (column.key === "rating") {
          return newIsSortedDescending
            ? b.rating - a.rating
            : a.rating - b.rating;
        } else if (column.key === "stock") {
          return newIsSortedDescending ? b.stock - a.stock : a.stock - b.stock;
        } else if (column.key === "price") {
          return newIsSortedDescending ? b.price - a.price : a.price - b.price;
        } else if (column.key === "discountPercentage") {
          return newIsSortedDescending
            ? b.discountPercentage - a.discountPercentage
            : a.discountPercentage - b.discountPercentage;
        }
        return 0;
      })
    );

    setSortedColumn(column.key);
    setIsSortedDescending(newIsSortedDescending);
  };

  return (
    <div>
      <div>{selectionDetails}</div>
      <MarqueeSelection selection={selection}>
        <DetailsList
          items={items}
          columns={columns.map((col) => ({
            ...col,
            isSorted: col.key === sortedColumn,
            isSortedDescending: isSortedDescending,
            onColumnClick: onColumnClick,
          }))}
          setKey="set"
          layoutMode={DetailsListLayoutMode.justified}
          selection={selection}
          selectionMode={SelectionMode.multiple}
          isHeaderVisible={true}
          className={classNames.table}
        />
      </MarqueeSelection>
    </div>
  );
};

export default MyList;


===============================================

